import {encodeAbiParameters,keccak256,parseEther,createWalletClient,http,encodeFunctionData,erc20Abi,parseTransaction,getAddress,parseUnits,defineChain,createPublicClient,getContract,decodeFunctionResult}from'viem';import {ethers,Signature,computeAddress,concat,keccak256 as keccak256$1}from'ethers';import {privateKeyToAccount}from'viem/accounts';import n1 from'eventemitter3';import {getBalance,readContract}from'viem/actions';import {CallData,hash,validateAndParseAddress,Provider,constants,Contract,CairoCustomEnum,Account,EthSigner,cairo}from'starknet';var Ke=Object.defineProperty;var he=(d,e)=>{for(var t in e)Ke(d,t,{get:e[t],enumerable:true});};var x=class extends Error{constructor(t,a){super(t);this.code=a;this.name="CurvyError";}},Te=class extends x{constructor(t,a){super(t,"SYNC_ERROR");this.originalError=a;this.name="AnnouncementSyncError";}},C=class extends x{constructor(t,a){super(t,"STORAGE_ERROR");this.originalError=a;this.name="StorageError";}},k=class extends x{constructor(t,a,r){super(t,"API_ERROR");this.statusCode=a;this.responseBody=r;this.name="APIError";}};function ge(d){if(typeof d!="string")return d;let[e,t]=d.split("."),a=BigInt(e),r=BigInt(t),s=a.toString(16).padStart(64,"0"),i=r.toString(16).padStart(64,"0"),o=s+i;if(o.length%2!==0)throw new Error("Hex string must have an even length.");let p=new Uint8Array(o.length/2);for(let b=0;b<o.length;b+=2)p[b/2]=Number.parseInt(o.substring(b,b+2),16);return p}var qe=/^\d+\.\d+$/;function H(d,e=true){if(!d)throw new Error("Public key is required!");if(!qe.test(d))throw new Error("Invalid public key format!");let[t,a]=d.split(".");if(!t||!a)throw new Error("Invalid public key format!");let r=s=>BigInt(s).toString(16).padStart(64,"0");return `0x${e?"04":""}${r(t)}${r(a)}`}function we(d){if(!(d instanceof Uint8Array))return d;let e=d.length/2;if(d.length%2!==0||e!==32)throw new Error("Invalid Uint8Array length. Expected 64 bytes.");let t=Array.from(d).map(o=>o.toString(16).padStart(2,"0")).join(""),a=t.slice(0,64),r=t.slice(64),s=BigInt(`0x${a}`),i=BigInt(`0x${r}`);return `${s}.${i}`}function g(d){return d.replace(" ","-").toLowerCase()}var Ce={};he(Ce,{Types:()=>T});var T;(i=>{(p=>p.ETHEREUM_SEPOLIA="ethereum-sepolia")(i.SupportedNetwork||={});(p=>p[p.ETHEREUM_SEPOLIA=1]="ETHEREUM_SEPOLIA")(i.SupportedNetworkId||={});(p=>p.ETHEREUM_SEPOLIA="11155111")(i.SupportedNetworkChainId||={});(f=>(f.TRANSFER="transfer",f.WITHDRAW="withdraw",f.DEPOSIT_TO_AGGREGATOR="deposit-to-aggregator"))(i.ActionSet||={});(l=>(l.INVALID="INVALID",l.ACCEPTED="ACCEPTED",l.BATCHED="BATCHED",l.FINALIZED="FINALIZED"))(i.ActionStage||={});(y=>(y.WAITING="WAITING",y.FULL="FULL",y.SUBMITTED="SUBMITTED",y.REVERTED="REVERTED",y.FINALIZED="FINALIZED"))(i.BatchStage||={});})(T||={});var _e={};he(_e,{Utils:()=>w});var Ae=d=>({domain:{name:"Curvy Protocol",version:"1.0.0",chainId:1},message:{title:"Curvy Protocol says 'Zdravo'!",content:`Curvy Protocol requests signature: ${d}`},primaryType:"AuthMessage",types:{EIP712Domain:[{name:"name",type:"string"},{name:"version",type:"string"},{name:"chainId",type:"uint256"}],AuthMessage:[{name:"title",type:"string"},{name:"content",type:"string"}]}}),_;(a=>(a.DeploymentAddresses={"ethereum-sepolia":{Main:"0x1b6771B255912546b89a244136674269F008e223"}},a.NATIVE_TOKEN_ADDRESS="0x0000000000000000000000000000000000000001",a.EnabledTokens={"ethereum-sepolia":[{address:a.NATIVE_TOKEN_ADDRESS,symbol:"ETH",decimals:18},{symbol:"USDC",address:"0x65aFADD39029741B3b8f0756952C74678c9cEC93",decimals:6},{address:"0x779877A7B0D9E8603169DdbD7836e478b4624789",symbol:"LINK",decimals:18}]}))(_||={});var w;(s=>{s.PrepareActionEstimationRequest=async(i,o,p,b,f,l)=>{let y;if([T.ActionSet.TRANSFER,T.ActionSet.WITHDRAW].includes(o))y=encodeAbiParameters([{name:"recipient",type:"address"}],[b]);else if(o===T.ActionSet.DEPOSIT_TO_AGGREGATOR)y=encodeAbiParameters([{name:"_notes",type:"tuple[]",internalType:"struct CurvyAggregator_Types.Note[]",components:[{name:"ownerHash",type:"uint256",internalType:"uint256"},{name:"token",type:"uint256",internalType:"uint256"},{name:"amount",type:"uint256",internalType:"uint256"}]}],[[{ownerHash:b,token:BigInt(f),amount:BigInt(l)}]]);else throw new Error(`Unsupported action type: ${o}. Supported actions are: ${Object.values(T.ActionSet).join(", ")}`);let n=JSON.stringify({token:f,amount:l,parameters:y});return {network:i,networkId:1,from:p.address,actionType:{service:"CSUC",type:o},encodedData:n,createdAt:new Date}},s.PrepareActionRequest=async(i,o,p,b)=>{(0, s.assertNetworkIsSupported)(i);let f=(0, s.supportedNetworkToChainId)(i),{token:l}=JSON.parse(p.encodedData),y=r.Token.getTokenSymbol(i,l);if(!y)throw new Error(`Token ${l} not found on network ${i}`);let n=o.CSUC.getNonce(i,y),c=await r.signActionPayload(f,p,b,n.toString(),o.privateKey);return {payload:p,totalFee:b,signature:c}},s.assertNetworkIsSupported=async i=>{if(i!==T.SupportedNetwork.ETHEREUM_SEPOLIA)throw new Error("CSUC:EVM - Unsupported network for action type conversion!")},s.supportedNetworkToChainId=i=>{switch(i){case T.SupportedNetwork.ETHEREUM_SEPOLIA:return T.SupportedNetworkChainId.ETHEREUM_SEPOLIA;default:throw new Error(`Unsupported network: ${i}. Supported networks: ${Object.values(T.SupportedNetwork).join(", ")}`)}};let r;(f=>{f.hashActionPayload=(l,y,n,c)=>{(0, s.assertNetworkIsSupported)(y.network);let u=(0, f.getOnchainActionId)(y),{token:m,amount:h,parameters:A}=JSON.parse(y.encodedData),v=[BigInt(l),{token:m,actionId:u,amount:h,totalFee:BigInt(n),limit:10000000000n,parameters:A||"0x"},BigInt(c)],G=encodeAbiParameters([{name:"_chainId",type:"uint256"},{name:"payload",type:"tuple",internalType:"struct CSUC_Types.ActionPayload",components:[{name:"token",type:"address",internalType:"address"},{name:"actionId",type:"uint256",internalType:"uint256"},{name:"amount",type:"uint256",internalType:"uint256"},{name:"totalFee",type:"uint256",internalType:"uint256"},{name:"limit",type:"uint256",internalType:"uint256"},{name:"parameters",type:"bytes",internalType:"bytes"}]},{name:"_nonce",type:"uint256"}],v);return keccak256(G)},f.getOnchainActionId=l=>{(0, s.assertNetworkIsSupported)(l.network);let y=c=>{let u=encodeAbiParameters([{type:"string"}],[c]);return BigInt(keccak256(u))},n=l.actionType;if(n.type==="transfer")return y("CSUC_TRANSFER_ACTION_ID");if(n.type==="withdraw")return y("CSUC_WITHDRAWAL_ACTION_ID");if(n.type==="deposit-to-aggregator")return y("AGGREGATOR_ACTION_HANDLER");throw new Error("CSUC:EVM:signActionPayload - Unsupported CSUC action type for conversion!")},f.signActionPayload=async(l,y,n,c,u)=>{if(y.network!==T.SupportedNetwork.ETHEREUM_SEPOLIA)throw new Error("Unsupported network for signing action");let m=(0, f.hashActionPayload)(l,y,n,c),h=new ethers.Wallet(u),A=h.signingKey.sign(m),{r:v,s:G,v:pe}=ethers.Signature.from(A),We=ethers.computeAddress(ethers.SigningKey.recoverPublicKey(m,{r:v,s:G,v:pe})),Ve=await h.getAddress();if(We.toLowerCase()!==Ve.toLowerCase())throw new Error("CSUC:EVM:signActionPayload - bad signature generated!");return {curve:"secp256k1",hash:m,r:v.toString(),s:G.toString(),v:BigInt(pe).toString()}};(c=>(c.parseDecimals=(u,m=18)=>{if((typeof u=="number"||typeof u=="bigint")&&(u=u.toString()),m===18)return parseEther(u);let h=parseEther(u);if(m<18){let v=10n**BigInt(18-m);return h/v}let A=10n**BigInt(m-18);return h*A},c.getTokenAddress=(u,m)=>{if(u==="ethereum-sepolia")return _.EnabledTokens[u].find(h=>h.symbol===m)?.address},c.getTokenSymbol=(u,m)=>{if(u===T.SupportedNetwork.ETHEREUM_SEPOLIA)return _.EnabledTokens[u].find(h=>h.address.toLowerCase()===m.toLowerCase())?.symbol}))(f.Token||={});})(r=s.EVM||={});})(w||={});var R=class{request;constructor(e){this.request=e;}async GetCSAInfo(e){return await this.request({method:"POST",path:"/csuc/csa-info",body:{...e}})}async EstimateAction(e){return await this.request({method:"POST",path:"/csuc/estimate-action-cost",body:{...e}})}async SubmitActionRequest(e){return await this.request({method:"POST",path:"/csuc/submit-action",body:{...e}})}};var Se;(e=>{(i=>(i.INVALID="INVALID",i.ACCEPTED="ACCEPTED",i.BATCHED="BATCHED",i.FINALIZED="FINALIZED"))(e.ActionStatus||={});})(Se||={});var Ee=d=>JSON.stringify(d,(e,t)=>typeof t=="bigint"?t.toString():t);var W={abi:[{type:"function",name:"UPGRADE_INTERFACE_VERSION",inputs:[],outputs:[{name:"",type:"string",internalType:"string"}],stateMutability:"view"},{type:"function",name:"_hashActionPayload",inputs:[{name:"_from",type:"address",internalType:"address"},{name:"_payload",type:"tuple",internalType:"struct CSUC_Types.ActionPayload",components:[{name:"token",type:"address",internalType:"address"},{name:"actionId",type:"uint256",internalType:"uint256"},{name:"amount",type:"uint256",internalType:"uint256"},{name:"totalFee",type:"uint256",internalType:"uint256"},{name:"limit",type:"uint256",internalType:"uint256"},{name:"parameters",type:"bytes",internalType:"bytes"}]}],outputs:[{name:"_hash",type:"bytes32",internalType:"bytes32"}],stateMutability:"view"},{type:"function",name:"_hashActionPayloadWithCustomNonce",inputs:[{name:"_payload",type:"tuple",internalType:"struct CSUC_Types.ActionPayload",components:[{name:"token",type:"address",internalType:"address"},{name:"actionId",type:"uint256",internalType:"uint256"},{name:"amount",type:"uint256",internalType:"uint256"},{name:"totalFee",type:"uint256",internalType:"uint256"},{name:"limit",type:"uint256",internalType:"uint256"},{name:"parameters",type:"bytes",internalType:"bytes"}]},{name:"_nonce",type:"uint256",internalType:"uint256"}],outputs:[{name:"_hash",type:"bytes32",internalType:"bytes32"}],stateMutability:"view"},{type:"function",name:"actionBecomesActiveAt",inputs:[{name:"",type:"uint256",internalType:"uint256"}],outputs:[{name:"",type:"uint256",internalType:"uint256"}],stateMutability:"view"},{type:"function",name:"actionInfo",inputs:[{name:"",type:"uint256",internalType:"uint256"}],outputs:[{name:"mandatoryFeePoints",type:"uint16",internalType:"uint16"},{name:"handler",type:"address",internalType:"address"}],stateMutability:"view"},{type:"function",name:"actionIsActive",inputs:[{name:"_actionId",type:"uint256",internalType:"uint256"}],outputs:[{name:"",type:"bool",internalType:"bool"}],stateMutability:"view"},{type:"function",name:"aggregator",inputs:[],outputs:[{name:"",type:"address",internalType:"address"}],stateMutability:"view"},{type:"function",name:"balanceAndNonce",inputs:[{name:"",type:"address",internalType:"address"},{name:"",type:"address",internalType:"address"}],outputs:[{name:"",type:"uint256",internalType:"uint256"}],stateMutability:"view"},{type:"function",name:"balanceOf",inputs:[{name:"_owner",type:"address",internalType:"address"},{name:"_token",type:"uint256",internalType:"uint256"}],outputs:[{name:"",type:"uint256",internalType:"uint256"}],stateMutability:"view"},{type:"function",name:"balanceOf",inputs:[{name:"_owner",type:"address",internalType:"address"},{name:"_token",type:"address",internalType:"address"}],outputs:[{name:"",type:"uint256",internalType:"uint256"}],stateMutability:"view"},{type:"function",name:"balanceOfBatch",inputs:[{name:"accounts",type:"address[]",internalType:"address[]"},{name:"ids",type:"uint256[]",internalType:"uint256[]"}],outputs:[{name:"",type:"uint256[]",internalType:"uint256[]"}],stateMutability:"view"},{type:"function",name:"batchCSAInfo",inputs:[{name:"_owners",type:"address[]",internalType:"address[]"},{name:"_tokens",type:"address[]",internalType:"address[]"}],outputs:[{name:"_csaInfos",type:"tuple[]",internalType:"struct CSUC_Types.CSAInfo[]",components:[{name:"owner",type:"address",internalType:"address"},{name:"token",type:"address",internalType:"address"},{name:"balance",type:"uint256",internalType:"uint256"},{name:"nonce",type:"uint256",internalType:"uint256"}]}],stateMutability:"view"},{type:"function",name:"feeCollector",inputs:[],outputs:[{name:"",type:"address",internalType:"address"}],stateMutability:"view"},{type:"function",name:"getActionHandlingInfo",inputs:[{name:"_actionId",type:"uint256",internalType:"uint256"}],outputs:[{name:"",type:"tuple",internalType:"struct CSUC_Types.ActionHandlingInfo",components:[{name:"mandatoryFeePoints",type:"uint16",internalType:"uint16"},{name:"handler",type:"address",internalType:"address"}]}],stateMutability:"view"},{type:"function",name:"getMandatoryFee",inputs:[{name:"_actionId",type:"uint256",internalType:"uint256"},{name:"_amount",type:"uint256",internalType:"uint256"}],outputs:[{name:"",type:"uint256",internalType:"uint256"}],stateMutability:"view"},{type:"function",name:"initialize",inputs:[],outputs:[],stateMutability:"nonpayable"},{type:"function",name:"isApprovedForAll",inputs:[{name:"account",type:"address",internalType:"address"},{name:"operator",type:"address",internalType:"address"}],outputs:[{name:"",type:"bool",internalType:"bool"}],stateMutability:"view"},{type:"function",name:"nonceOf",inputs:[{name:"_owner",type:"address",internalType:"address"},{name:"_token",type:"address",internalType:"address"}],outputs:[{name:"",type:"uint256",internalType:"uint256"}],stateMutability:"view"},{type:"function",name:"operator",inputs:[],outputs:[{name:"",type:"address",internalType:"address"}],stateMutability:"view"},{type:"function",name:"operatorExecute",inputs:[{name:"_actions",type:"tuple[]",internalType:"struct CSUC_Types.Action[]",components:[{name:"from",type:"address",internalType:"address"},{name:"signature_v",type:"uint8",internalType:"uint8"},{name:"signature_r",type:"bytes32",internalType:"bytes32"},{name:"signature_s",type:"bytes32",internalType:"bytes32"},{name:"payload",type:"tuple",internalType:"struct CSUC_Types.ActionPayload",components:[{name:"token",type:"address",internalType:"address"},{name:"actionId",type:"uint256",internalType:"uint256"},{name:"amount",type:"uint256",internalType:"uint256"},{name:"totalFee",type:"uint256",internalType:"uint256"},{name:"limit",type:"uint256",internalType:"uint256"},{name:"parameters",type:"bytes",internalType:"bytes"}]}]}],outputs:[{name:"",type:"uint256",internalType:"uint256"}],stateMutability:"nonpayable"},{type:"function",name:"owner",inputs:[],outputs:[{name:"",type:"address",internalType:"address"}],stateMutability:"view"},{type:"function",name:"proxiableUUID",inputs:[],outputs:[{name:"",type:"bytes32",internalType:"bytes32"}],stateMutability:"view"},{type:"function",name:"renounceOwnership",inputs:[],outputs:[],stateMutability:"nonpayable"},{type:"function",name:"safeBatchTransferFrom",inputs:[{name:"_from",type:"address",internalType:"address"},{name:"_to",type:"address",internalType:"address"},{name:"_ids",type:"uint256[]",internalType:"uint256[]"},{name:"_values",type:"uint256[]",internalType:"uint256[]"},{name:"_data",type:"bytes",internalType:"bytes"}],outputs:[],stateMutability:"nonpayable"},{type:"function",name:"safeTransferFrom",inputs:[{name:"_from",type:"address",internalType:"address"},{name:"_to",type:"address",internalType:"address"},{name:"_id",type:"uint256",internalType:"uint256"},{name:"_value",type:"uint256",internalType:"uint256"},{name:"",type:"bytes",internalType:"bytes"}],outputs:[],stateMutability:"nonpayable"},{type:"function",name:"setApprovalForAll",inputs:[{name:"operator",type:"address",internalType:"address"},{name:"approved",type:"bool",internalType:"bool"}],outputs:[],stateMutability:"nonpayable"},{type:"function",name:"supportsInterface",inputs:[{name:"interfaceId",type:"bytes4",internalType:"bytes4"}],outputs:[{name:"",type:"bool",internalType:"bool"}],stateMutability:"view"},{type:"function",name:"transferOwnership",inputs:[{name:"newOwner",type:"address",internalType:"address"}],outputs:[],stateMutability:"nonpayable"},{type:"function",name:"unwrap",inputs:[{name:"_action",type:"tuple",internalType:"struct CSUC_Types.Action",components:[{name:"from",type:"address",internalType:"address"},{name:"signature_v",type:"uint8",internalType:"uint8"},{name:"signature_r",type:"bytes32",internalType:"bytes32"},{name:"signature_s",type:"bytes32",internalType:"bytes32"},{name:"payload",type:"tuple",internalType:"struct CSUC_Types.ActionPayload",components:[{name:"token",type:"address",internalType:"address"},{name:"actionId",type:"uint256",internalType:"uint256"},{name:"amount",type:"uint256",internalType:"uint256"},{name:"totalFee",type:"uint256",internalType:"uint256"},{name:"limit",type:"uint256",internalType:"uint256"},{name:"parameters",type:"bytes",internalType:"bytes"}]}]}],outputs:[{name:"",type:"bool",internalType:"bool"}],stateMutability:"nonpayable"},{type:"function",name:"updateConfig",inputs:[{name:"_update",type:"tuple",internalType:"struct CSUC_Types.ConfigUpdate",components:[{name:"newOperator",type:"address",internalType:"address"},{name:"newFeeCollector",type:"address",internalType:"address"},{name:"newAggregator",type:"address",internalType:"address"},{name:"actionHandlingInfoUpdate",type:"tuple[]",internalType:"struct CSUC_Types.ActionHandlingInfoUpdate[]",components:[{name:"actionId",type:"uint256",internalType:"uint256"},{name:"info",type:"tuple",internalType:"struct CSUC_Types.ActionHandlingInfo",components:[{name:"mandatoryFeePoints",type:"uint16",internalType:"uint16"},{name:"handler",type:"address",internalType:"address"}]}]}]}],outputs:[{name:"",type:"bool",internalType:"bool"}],stateMutability:"nonpayable"},{type:"function",name:"upgradeToAndCall",inputs:[{name:"newImplementation",type:"address",internalType:"address"},{name:"data",type:"bytes",internalType:"bytes"}],outputs:[],stateMutability:"payable"},{type:"function",name:"uri",inputs:[{name:"",type:"uint256",internalType:"uint256"}],outputs:[{name:"",type:"string",internalType:"string"}],stateMutability:"view"},{type:"function",name:"wrap",inputs:[{name:"_to",type:"address",internalType:"address"},{name:"_token",type:"address",internalType:"address"},{name:"_amount",type:"uint256",internalType:"uint256"}],outputs:[{name:"",type:"bool",internalType:"bool"}],stateMutability:"payable"},{type:"function",name:"wrapERC20",inputs:[{name:"_to",type:"address",internalType:"address"},{name:"_token",type:"address",internalType:"address"},{name:"_amount",type:"uint256",internalType:"uint256"}],outputs:[{name:"",type:"bool",internalType:"bool"}],stateMutability:"nonpayable"},{type:"function",name:"wrapNative",inputs:[{name:"_to",type:"address",internalType:"address"}],outputs:[{name:"",type:"bool",internalType:"bool"}],stateMutability:"payable"},{type:"event",name:"ActionExecuted",inputs:[{name:"action",type:"tuple",indexed:false,internalType:"struct CSUC_Types.Action",components:[{name:"from",type:"address",internalType:"address"},{name:"signature_v",type:"uint8",internalType:"uint8"},{name:"signature_r",type:"bytes32",internalType:"bytes32"},{name:"signature_s",type:"bytes32",internalType:"bytes32"},{name:"payload",type:"tuple",internalType:"struct CSUC_Types.ActionPayload",components:[{name:"token",type:"address",internalType:"address"},{name:"actionId",type:"uint256",internalType:"uint256"},{name:"amount",type:"uint256",internalType:"uint256"},{name:"totalFee",type:"uint256",internalType:"uint256"},{name:"limit",type:"uint256",internalType:"uint256"},{name:"parameters",type:"bytes",internalType:"bytes"}]}]}],anonymous:false},{type:"event",name:"ApprovalForAll",inputs:[{name:"account",type:"address",indexed:true,internalType:"address"},{name:"operator",type:"address",indexed:true,internalType:"address"},{name:"approved",type:"bool",indexed:false,internalType:"bool"}],anonymous:false},{type:"event",name:"ConfigUpdated",inputs:[{name:"update",type:"tuple",indexed:false,internalType:"struct CSUC_Types.ConfigUpdate",components:[{name:"newOperator",type:"address",internalType:"address"},{name:"newFeeCollector",type:"address",internalType:"address"},{name:"newAggregator",type:"address",internalType:"address"},{name:"actionHandlingInfoUpdate",type:"tuple[]",internalType:"struct CSUC_Types.ActionHandlingInfoUpdate[]",components:[{name:"actionId",type:"uint256",internalType:"uint256"},{name:"info",type:"tuple",internalType:"struct CSUC_Types.ActionHandlingInfo",components:[{name:"mandatoryFeePoints",type:"uint16",internalType:"uint16"},{name:"handler",type:"address",internalType:"address"}]}]}]}],anonymous:false},{type:"event",name:"Initialized",inputs:[{name:"version",type:"uint64",indexed:false,internalType:"uint64"}],anonymous:false},{type:"event",name:"OwnershipTransferred",inputs:[{name:"previousOwner",type:"address",indexed:true,internalType:"address"},{name:"newOwner",type:"address",indexed:true,internalType:"address"}],anonymous:false},{type:"event",name:"TransferBatch",inputs:[{name:"operator",type:"address",indexed:true,internalType:"address"},{name:"from",type:"address",indexed:true,internalType:"address"},{name:"to",type:"address",indexed:true,internalType:"address"},{name:"ids",type:"uint256[]",indexed:false,internalType:"uint256[]"},{name:"values",type:"uint256[]",indexed:false,internalType:"uint256[]"}],anonymous:false},{type:"event",name:"TransferSingle",inputs:[{name:"operator",type:"address",indexed:true,internalType:"address"},{name:"from",type:"address",indexed:true,internalType:"address"},{name:"to",type:"address",indexed:true,internalType:"address"},{name:"id",type:"uint256",indexed:false,internalType:"uint256"},{name:"value",type:"uint256",indexed:false,internalType:"uint256"}],anonymous:false},{type:"event",name:"URI",inputs:[{name:"value",type:"string",indexed:false,internalType:"string"},{name:"id",type:"uint256",indexed:true,internalType:"uint256"}],anonymous:false},{type:"event",name:"UnwrappingToken",inputs:[{name:"to",type:"address",indexed:false,internalType:"address"},{name:"token",type:"address",indexed:false,internalType:"address"},{name:"amount",type:"uint256",indexed:false,internalType:"uint256"}],anonymous:false},{type:"event",name:"Upgraded",inputs:[{name:"implementation",type:"address",indexed:true,internalType:"address"}],anonymous:false},{type:"event",name:"WrappingToken",inputs:[{name:"to",type:"address",indexed:false,internalType:"address"},{name:"token",type:"address",indexed:false,internalType:"address"},{name:"amount",type:"uint256",indexed:false,internalType:"uint256"}],anonymous:false},{type:"error",name:"AddressEmptyCode",inputs:[{name:"target",type:"address",internalType:"address"}]},{type:"error",name:"ERC1155InsufficientBalance",inputs:[{name:"sender",type:"address",internalType:"address"},{name:"balance",type:"uint256",internalType:"uint256"},{name:"needed",type:"uint256",internalType:"uint256"},{name:"tokenId",type:"uint256",internalType:"uint256"}]},{type:"error",name:"ERC1155InvalidApprover",inputs:[{name:"approver",type:"address",internalType:"address"}]},{type:"error",name:"ERC1155InvalidArrayLength",inputs:[{name:"idsLength",type:"uint256",internalType:"uint256"},{name:"valuesLength",type:"uint256",internalType:"uint256"}]},{type:"error",name:"ERC1155InvalidOperator",inputs:[{name:"operator",type:"address",internalType:"address"}]},{type:"error",name:"ERC1155InvalidReceiver",inputs:[{name:"receiver",type:"address",internalType:"address"}]},{type:"error",name:"ERC1155InvalidSender",inputs:[{name:"sender",type:"address",internalType:"address"}]},{type:"error",name:"ERC1155MissingApprovalForAll",inputs:[{name:"operator",type:"address",internalType:"address"},{name:"owner",type:"address",internalType:"address"}]},{type:"error",name:"ERC1967InvalidImplementation",inputs:[{name:"implementation",type:"address",internalType:"address"}]},{type:"error",name:"ERC1967NonPayable",inputs:[]},{type:"error",name:"FailedCall",inputs:[]},{type:"error",name:"InvalidInitialization",inputs:[]},{type:"error",name:"NotInitializing",inputs:[]},{type:"error",name:"OwnableInvalidOwner",inputs:[{name:"owner",type:"address",internalType:"address"}]},{type:"error",name:"OwnableUnauthorizedAccount",inputs:[{name:"account",type:"address",internalType:"address"}]},{type:"error",name:"ReentrancyGuardReentrantCall",inputs:[]},{type:"error",name:"SafeERC20FailedOperation",inputs:[{name:"token",type:"address",internalType:"address"}]},{type:"error",name:"UUPSUnauthorizedCallContext",inputs:[]},{type:"error",name:"UUPSUnsupportedProxiableUUID",inputs:[{name:"slot",type:"bytes32",internalType:"bytes32"}]}]};var V;(e=>e.PrepareTransferIntoCSUC=async(t,a,r,s,i)=>{let o=privateKeyToAccount(a.privateKey),{Main:p}=_.DeploymentAddresses["ethereum-sepolia"],b=await t.publicClient.getTransactionCount({address:o.address}),f=createWalletClient({account:o,chain:t.chain,transport:http(t.rpcUrl)}),l=[{to:s,data:encodeFunctionData({abi:erc20Abi,functionName:"approve",args:[p,i]}),gas:70000n,nonce:b},{to:p,data:encodeFunctionData({abi:W.abi,functionName:"wrapERC20",args:[r,s,i]}),gas:120000n,nonce:++b}],y=[],n=[];for(let m of l){let h=await f.prepareTransactionRequest({...m,value:0n,gasPrice:1000000000n,account:o,chain:f.chain}),A=await f.signTransaction(h);parseTransaction(A);y.push(h),n.push(A);}return {networkId:1,payloads:y.map(m=>({data:Ee(m)})),signedPayloads:n}})(V||={});var U=class{request;constructor(e){this.request=e;}async SubmitRequest(e){return await this.request({method:"POST",path:"/gas-sponsorship/submit-action",body:{actions:[e]}})}};var t1=5e3,K=class{apiKey;bearerToken;apiBaseUrl;CSUC;GasSponsorship;constructor(e,t){if(!e.apiKey&&!e.bearerToken)throw new Error("Either apiKey or bearerToken must be provided");if(e.apiKey&&e.bearerToken)throw new Error("Cannot provide both apiKey and bearerToken, choose one");this.apiKey=e.apiKey,this.bearerToken=e.bearerToken,this.apiBaseUrl=t||"https://api.curvy.box",this.CSUC=new R(this.request.bind(this)),this.GasSponsorship=new U(this.request.bind(this));}UpdateBearerToken(e){this.bearerToken=e,this.apiKey=void 0;}getHeaders(){let e={"Content-Type":"application/json","User-Agent":"curvy-sdk"};if(this.bearerToken)return {...e,Authorization:`Bearer ${this.bearerToken}`};if(this.apiKey)return {...e,"X-Curvy-API-Key":this.apiKey};throw new Error("No authentication method available")}async request({method:e,path:t,body:a,timeout:r=t1,queryParams:s}){let i=new AbortController,o=setTimeout(()=>i.abort(),r);try{let p=new URL(`${this.apiBaseUrl}${t}`);if(s)for(let[l,y]of Object.entries(s))p.searchParams.append(l,String(y));let b=await fetch(p.toString(),{method:e,headers:this.getHeaders(),body:a?JSON.stringify(a):void 0,signal:i.signal});clearTimeout(o);let f;try{f=await b.json();}catch{throw new k("Invalid JSON response",b.status,await b.text())}if(f.error!==void 0&&f.data===void 0)throw new k(f.error||`HTTP ${b.status}`,b.status,f);if(f.data===void 0)throw new k("Missing data in response",b.status,f);if(Array.isArray(f.data))f.data=f.data.map(l=>{try{return typeof l=="string"?JSON.parse(l):l}catch{return l}});else if(f.data&&typeof f.data=="object")for(let l of Object.keys(f.data))try{let y=f.data[l];f.data[l]=typeof y=="string"?JSON.parse(y):y;}catch{}return f.data}catch(p){throw p instanceof k?p:new k(`Request failed: ${p.message}`,void 0,p)}finally{clearTimeout(o);}}async CreateAnnouncement(e){return await this.request({method:"POST",path:"/announcement",body:e})}async GetAnnouncements(e,t,a){let r={size:a};e&&(r.startTime=e.getTime()),t&&(r.endTime=t.getTime());let s=await this.request({method:"GET",path:"/announcement",queryParams:r});return s.announcements=s.announcements.map(i=>({...i,ephemeralPublicKey:ge(i.ephemeralPublicKey)})),s}async GetNetworks(){return (await this.request({method:"GET",path:"/currency/latest"})).map(t=>(t.rpcUrl||(t.rpcUrl=`${this.apiBaseUrl}/rpc/${g(t.name)}`),t))}async ResolveUsername(e){return this.request({method:"GET",path:`/user/resolve/${e}`})}async GetCurvyHandleByOwnerAddress(e){return (await this.request({method:"GET",path:`/user/check/${e}`}))?.handle}};var P=["0x5c3d0c6de131223c3f0c5691bca79047605ed0f241b5f82fdedd3b3bec70d7a","0x76fe16155ba56e21af745f15c85cc989987b74e8bb48af2e7f147991b62c082"],fe={address:"0x07029501269c0795f5215afed8e012aeec81184355e756c34ada2b235ce85cd5",pk:"0x043b0297181e2e6bd8a328e16353f33c2fbcdd3d02141e3ca4d5ab9c3c2b86e5"},xe=d=>({domain:{name:"Curvy Protocol",chainId:"0x534e5f4d41494e",version:"1.0.0",revision:"1"},primaryType:"Simple",types:{Simple:[{name:"title",type:"shortstring"},{name:"content",type:"string"}],StarknetDomain:[{name:"name",type:"shortstring"},{name:"chainId",type:"shortstring"},{name:"version",type:"shortstring"}]},message:{title:"Curvy Protocol says 'Zdravo'!",content:`Curvy Protocol requests signature: ${d}`}});(()=>{let d=()=>{let a=new Error("not implemented");return a.code="ENOSYS",a};if(!globalThis.fs){let a="";globalThis.fs={constants:{O_WRONLY:-1,O_RDWR:-1,O_CREAT:-1,O_TRUNC:-1,O_APPEND:-1,O_EXCL:-1,O_DIRECTORY:-1},writeSync(r,s){a+=t.decode(s);let i=a.lastIndexOf(`
`);return i!=-1&&(console.log(a.substring(0,i)),a=a.substring(i+1)),s.length},write(r,s,i,o,p,b){if(i!==0||o!==s.length||p!==null){b(d());return}let f=this.writeSync(r,s);b(null,f);},chmod(r,s,i){i(d());},chown(r,s,i,o){o(d());},close(r,s){s(d());},fchmod(r,s,i){i(d());},fchown(r,s,i,o){o(d());},fstat(r,s){s(d());},fsync(r,s){s(null);},ftruncate(r,s,i){i(d());},lchown(r,s,i,o){o(d());},link(r,s,i){i(d());},lstat(r,s){s(d());},mkdir(r,s,i){i(d());},open(r,s,i,o){o(d());},read(r,s,i,o,p,b){b(d());},readdir(r,s){s(d());},readlink(r,s){s(d());},rename(r,s,i){i(d());},rmdir(r,s){s(d());},stat(r,s){s(d());},symlink(r,s,i){i(d());},truncate(r,s,i){i(d());},unlink(r,s){s(d());},utimes(r,s,i,o){o(d());}};}if(globalThis.process||(globalThis.process={getuid(){return  -1},getgid(){return  -1},geteuid(){return  -1},getegid(){return  -1},getgroups(){throw d()},pid:-1,ppid:-1,umask(){throw d()},cwd(){throw d()},chdir(){throw d()}}),globalThis.path||(globalThis.path={resolve(...a){return a.join("/")}}),!globalThis.crypto)throw new Error("globalThis.crypto is not available, polyfill required (crypto.getRandomValues only)");if(!globalThis.performance)throw new Error("globalThis.performance is not available, polyfill required (performance.now only)");if(!globalThis.TextEncoder)throw new Error("globalThis.TextEncoder is not available, polyfill required");if(!globalThis.TextDecoder)throw new Error("globalThis.TextDecoder is not available, polyfill required");let e=new TextEncoder("utf-8"),t=new TextDecoder("utf-8");globalThis.Go=class{constructor(){this.argv=["js"],this.env={},this.exit=n=>{n!==0&&console.warn("exit code:",n);},this._exitPromise=new Promise(n=>{this._resolveExitPromise=n;}),this._pendingEvent=null,this._scheduledTimeouts=new Map,this._nextCallbackTimeoutID=1;let a=(n,c)=>{this.mem.setUint32(n+0,c,true),this.mem.setUint32(n+4,Math.floor(c/4294967296),true);},s=n=>{let c=this.mem.getUint32(n+0,true),u=this.mem.getInt32(n+4,true);return c+u*4294967296},i=n=>{let c=this.mem.getFloat64(n,true);if(c===0)return;if(!isNaN(c))return c;let u=this.mem.getUint32(n,true);return this._values[u]},o=(n,c)=>{if(typeof c=="number"&&c!==0){if(isNaN(c)){this.mem.setUint32(n+4,2146959360,true),this.mem.setUint32(n,0,true);return}this.mem.setFloat64(n,c,true);return}if(c===void 0){this.mem.setFloat64(n,0,true);return}let m=this._ids.get(c);m===void 0&&(m=this._idPool.pop(),m===void 0&&(m=this._values.length),this._values[m]=c,this._goRefCounts[m]=0,this._ids.set(c,m)),this._goRefCounts[m]++;let h=0;switch(typeof c){case "object":c!==null&&(h=1);break;case "string":h=2;break;case "symbol":h=3;break;case "function":h=4;break}this.mem.setUint32(n+4,2146959360|h,true),this.mem.setUint32(n,m,true);},p=n=>{let c=s(n+0),u=s(n+8);return new Uint8Array(this._inst.exports.mem.buffer,c,u)},b=n=>{let c=s(n+0),u=s(n+8),m=new Array(u);for(let h=0;h<u;h++)m[h]=i(c+h*8);return m},f=n=>{let c=s(n+0),u=s(n+8);return t.decode(new DataView(this._inst.exports.mem.buffer,c,u))},l=(n,c)=>(this._inst.exports.testExport0(),this._inst.exports.testExport(n,c)),y=Date.now()-performance.now();this.importObject={_gotest:{add:(n,c)=>n+c,callExport:l},gojs:{"runtime.wasmExit":n=>{n>>>=0;let c=this.mem.getInt32(n+8,true);this.exited=true,delete this._inst,delete this._values,delete this._goRefCounts,delete this._ids,delete this._idPool,this.exit(c);},"runtime.wasmWrite":n=>{n>>>=0;let c=s(n+8),u=s(n+16),m=this.mem.getInt32(n+24,true);fs.writeSync(c,new Uint8Array(this._inst.exports.mem.buffer,u,m));},"runtime.resetMemoryDataView":n=>{this.mem=new DataView(this._inst.exports.mem.buffer);},"runtime.nanotime1":n=>{n>>>=0,a(n+8,(y+performance.now())*1e6);},"runtime.walltime":n=>{n>>>=0;let c=new Date().getTime();a(n+8,c/1e3),this.mem.setInt32(n+16,c%1e3*1e6,true);},"runtime.scheduleTimeoutEvent":n=>{n>>>=0;let c=this._nextCallbackTimeoutID;this._nextCallbackTimeoutID++,this._scheduledTimeouts.set(c,setTimeout(()=>{for(this._resume();this._scheduledTimeouts.has(c);)console.warn("scheduleTimeoutEvent: missed timeout event"),this._resume();},s(n+8))),this.mem.setInt32(n+16,c,true);},"runtime.clearTimeoutEvent":n=>{n>>>=0;let c=this.mem.getInt32(n+8,true);clearTimeout(this._scheduledTimeouts.get(c)),this._scheduledTimeouts.delete(c);},"runtime.getRandomData":n=>{n>>>=0,crypto.getRandomValues(p(n+8));},"syscall/js.finalizeRef":n=>{n>>>=0;let c=this.mem.getUint32(n+8,true);if(this._goRefCounts[c]--,this._goRefCounts[c]===0){let u=this._values[c];this._values[c]=null,this._ids.delete(u),this._idPool.push(c);}},"syscall/js.stringVal":n=>{n>>>=0,o(n+24,f(n+8));},"syscall/js.valueGet":n=>{n>>>=0;let c=Reflect.get(i(n+8),f(n+16));n=this._inst.exports.getsp()>>>0,o(n+32,c);},"syscall/js.valueSet":n=>{n>>>=0,Reflect.set(i(n+8),f(n+16),i(n+32));},"syscall/js.valueDelete":n=>{n>>>=0,Reflect.deleteProperty(i(n+8),f(n+16));},"syscall/js.valueIndex":n=>{n>>>=0,o(n+24,Reflect.get(i(n+8),s(n+16)));},"syscall/js.valueSetIndex":n=>{n>>>=0,Reflect.set(i(n+8),s(n+16),i(n+24));},"syscall/js.valueCall":n=>{n>>>=0;try{let c=i(n+8),u=Reflect.get(c,f(n+16)),m=b(n+32),h=Reflect.apply(u,c,m);n=this._inst.exports.getsp()>>>0,o(n+56,h),this.mem.setUint8(n+64,1);}catch(c){n=this._inst.exports.getsp()>>>0,o(n+56,c),this.mem.setUint8(n+64,0);}},"syscall/js.valueInvoke":n=>{n>>>=0;try{let c=i(n+8),u=b(n+16),m=Reflect.apply(c,void 0,u);n=this._inst.exports.getsp()>>>0,o(n+40,m),this.mem.setUint8(n+48,1);}catch(c){n=this._inst.exports.getsp()>>>0,o(n+40,c),this.mem.setUint8(n+48,0);}},"syscall/js.valueNew":n=>{n>>>=0;try{let c=i(n+8),u=b(n+16),m=Reflect.construct(c,u);n=this._inst.exports.getsp()>>>0,o(n+40,m),this.mem.setUint8(n+48,1);}catch(c){n=this._inst.exports.getsp()>>>0,o(n+40,c),this.mem.setUint8(n+48,0);}},"syscall/js.valueLength":n=>{n>>>=0,a(n+16,parseInt(i(n+8).length));},"syscall/js.valuePrepareString":n=>{n>>>=0;let c=e.encode(String(i(n+8)));o(n+16,c),a(n+24,c.length);},"syscall/js.valueLoadString":n=>{n>>>=0;let c=i(n+8);p(n+16).set(c);},"syscall/js.valueInstanceOf":n=>{n>>>=0,this.mem.setUint8(n+24,i(n+8)instanceof i(n+16)?1:0);},"syscall/js.copyBytesToGo":n=>{n>>>=0;let c=p(n+8),u=i(n+32);if(!(u instanceof Uint8Array||u instanceof Uint8ClampedArray)){this.mem.setUint8(n+48,0);return}let m=u.subarray(0,c.length);c.set(m),a(n+40,m.length),this.mem.setUint8(n+48,1);},"syscall/js.copyBytesToJS":n=>{n>>>=0;let c=i(n+8),u=p(n+16);if(!(c instanceof Uint8Array||c instanceof Uint8ClampedArray)){this.mem.setUint8(n+48,0);return}let m=u.subarray(0,c.length);c.set(m),a(n+40,m.length),this.mem.setUint8(n+48,1);},debug:n=>{console.log(n);}}};}async run(a){if(!(a instanceof WebAssembly.Instance))throw new Error("Go.run: WebAssembly.Instance expected");this._inst=a,this.mem=new DataView(this._inst.exports.mem.buffer),this._values=[NaN,0,null,true,false,globalThis,this],this._goRefCounts=new Array(this._values.length).fill(1/0),this._ids=new Map([[0,1],[null,2],[true,3],[false,4],[globalThis,5],[this,6]]),this._idPool=[],this.exited=false;let r=4096,s=l=>{let y=r,n=e.encode(l+"\0");return new Uint8Array(this.mem.buffer,r,n.length).set(n),r+=n.length,r%8!==0&&(r+=8-r%8),y},i=this.argv.length,o=[];this.argv.forEach(l=>{o.push(s(l));}),o.push(0),Object.keys(this.env).sort().forEach(l=>{o.push(s(`${l}=${this.env[l]}`));}),o.push(0);let b=r;if(o.forEach(l=>{this.mem.setUint32(r,l,true),this.mem.setUint32(r+4,0,true),r+=8;}),r>=12288)throw new Error("total length of command line and environment variables exceeds limit");this._inst.exports.run(i,b),this.exited&&this._resolveExitPromise(),await this._exitPromise;}_resume(){if(this.exited)throw new Error("Go program has already exited");this._inst.exports.resume(),this.exited&&this._resolveExitPromise();}_makeFuncWrapper(a){let r=this;return function(){let s={id:a,this:this,args:arguments};return r._pendingEvent=s,r._resume(),s.result}}};})();async function a1(d){let e=new Go;if(e.importObject.gojs["runtime.wasmExit"]=r=>{console.warn("wasmExit called, ignoring");},typeof process<"u"&&process.versions!=null&&process.versions.node!=null){let r=await import('fs/promises'),s=await import('path'),{fileURLToPath:i}=await import('url'),o=i(import.meta.url),p=s.dirname(o),b=s.resolve(p,"./curvy-core-v1.0.2.wasm"),f=await r.readFile(d??b),l=f.buffer.slice(f.byteOffset,f.byteOffset+f.byteLength),y=(await WebAssembly.instantiate(l,e.importObject)).instance;e.run(y);return}let a;if(d)a=(await WebAssembly.instantiateStreaming(fetch(d),e.importObject)).instance;else {let{default:r}=await import('./curvy-core-v1.0.2.wasm?init');a=await r(e.importObject);}e.run(a);}var z=class d{static async init(e){return await a1(e),new d}send(e,t){let a=JSON.stringify({K:e,V:t}),r=JSON.parse(curvy.send(a));return {announcement:{ephemeralPublicKey:r.R,viewTag:r.viewTag,recipientStealthPublicKey:r.spendingPubKey},ephemeralPrivateKey:r.r}}scan(e,t,a){let s=JSON.stringify({k:e,v:t,...(p=>{let b=[],f=[];for(let l of p)b.push(we(l.ephemeralPublicKey)),f.push(l.viewTag);return {Rs:b,viewTags:f}})(a)}),{spendingPubKeys:i,spendingPrivKeys:o}=JSON.parse(curvy.scan(s));return {spendingPubKeys:i??[],spendingPrivKeys:(o??[]).map(p=>`0x${p.slice(2).padStart(64,"0")}`)}}generateKeyPairs(){let e=curvy.new_meta(),t=JSON.parse(e);return {s:t.k,S:t.K,v:t.v,V:t.V}}isValidBN254Point(e){return curvy.dbg_isValidBN254Point(e)}isValidSECP256k1Point(e){return curvy.dbg_isValidSECP256k1Point(e)}getPublicKeys(e,t){let a=JSON.stringify({k:e,v:t}),r=JSON.parse(curvy.get_meta(a));return {s:r.k,v:r.v,S:r.K,V:r.V}}version(){return curvy.version()}};var Y="sync-started",M="sync-progress",j="sync-complete",Z="sync-error",$="scan-progress",X="scan-complete",J="scan-match",ee="scan-error",q=class extends n1{emitSyncStarted(e){this.emit(Y,e);}emitSyncProgress(e){this.emit(M,e);}emitSyncComplete(e){this.emit(j,e);}emitSyncError(e){this.emit(Z,e);}emitScanProgress(e){this.emit($,e);}emitScanComplete(e){this.emit(X,e);}emitScanMatch(e){this.emit(J,e);}emitScanError(e){this.emit(ee,e);}};var te=[{inputs:[{components:[{internalType:"address",name:"target",type:"address"},{internalType:"bytes",name:"callData",type:"bytes"}],internalType:"struct Multicall3.Call[]",name:"calls",type:"tuple[]"}],name:"aggregate",outputs:[{internalType:"uint256",name:"blockNumber",type:"uint256"},{internalType:"bytes[]",name:"returnData",type:"bytes[]"}],stateMutability:"payable",type:"function"},{inputs:[{components:[{internalType:"address",name:"target",type:"address"},{internalType:"bool",name:"allowFailure",type:"bool"},{internalType:"bytes",name:"callData",type:"bytes"}],internalType:"struct Multicall3.Call3[]",name:"calls",type:"tuple[]"}],name:"aggregate3",outputs:[{components:[{internalType:"bool",name:"success",type:"bool"},{internalType:"bytes",name:"returnData",type:"bytes"}],internalType:"struct Multicall3.Result[]",name:"returnData",type:"tuple[]"}],stateMutability:"payable",type:"function"},{inputs:[{components:[{internalType:"address",name:"target",type:"address"},{internalType:"bool",name:"allowFailure",type:"bool"},{internalType:"uint256",name:"value",type:"uint256"},{internalType:"bytes",name:"callData",type:"bytes"}],internalType:"struct Multicall3.Call3Value[]",name:"calls",type:"tuple[]"}],name:"aggregate3Value",outputs:[{components:[{internalType:"bool",name:"success",type:"bool"},{internalType:"bytes",name:"returnData",type:"bytes"}],internalType:"struct Multicall3.Result[]",name:"returnData",type:"tuple[]"}],stateMutability:"payable",type:"function"},{inputs:[{components:[{internalType:"address",name:"target",type:"address"},{internalType:"bytes",name:"callData",type:"bytes"}],internalType:"struct Multicall3.Call[]",name:"calls",type:"tuple[]"}],name:"blockAndAggregate",outputs:[{internalType:"uint256",name:"blockNumber",type:"uint256"},{internalType:"bytes32",name:"blockHash",type:"bytes32"},{components:[{internalType:"bool",name:"success",type:"bool"},{internalType:"bytes",name:"returnData",type:"bytes"}],internalType:"struct Multicall3.Result[]",name:"returnData",type:"tuple[]"}],stateMutability:"payable",type:"function"},{inputs:[],name:"getBasefee",outputs:[{internalType:"uint256",name:"basefee",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"blockNumber",type:"uint256"}],name:"getBlockHash",outputs:[{internalType:"bytes32",name:"blockHash",type:"bytes32"}],stateMutability:"view",type:"function"},{inputs:[],name:"getBlockNumber",outputs:[{internalType:"uint256",name:"blockNumber",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"getChainId",outputs:[{internalType:"uint256",name:"chainid",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"getCurrentBlockCoinbase",outputs:[{internalType:"address",name:"coinbase",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"getCurrentBlockDifficulty",outputs:[{internalType:"uint256",name:"difficulty",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"getCurrentBlockGasLimit",outputs:[{internalType:"uint256",name:"gaslimit",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"getCurrentBlockTimestamp",outputs:[{internalType:"uint256",name:"timestamp",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"addr",type:"address"}],name:"getEthBalance",outputs:[{internalType:"uint256",name:"balance",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"getLastBlockHash",outputs:[{internalType:"bytes32",name:"blockHash",type:"bytes32"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"bool",name:"requireSuccess",type:"bool"},{components:[{internalType:"address",name:"target",type:"address"},{internalType:"bytes",name:"callData",type:"bytes"}],internalType:"struct Multicall3.Call[]",name:"calls",type:"tuple[]"}],name:"tryAggregate",outputs:[{components:[{internalType:"bool",name:"success",type:"bool"},{internalType:"bytes",name:"returnData",type:"bytes"}],internalType:"struct Multicall3.Result[]",name:"returnData",type:"tuple[]"}],stateMutability:"payable",type:"function"},{inputs:[{internalType:"bool",name:"requireSuccess",type:"bool"},{components:[{internalType:"address",name:"target",type:"address"},{internalType:"bytes",name:"callData",type:"bytes"}],internalType:"struct Multicall3.Call[]",name:"calls",type:"tuple[]"}],name:"tryBlockAndAggregate",outputs:[{internalType:"uint256",name:"blockNumber",type:"uint256"},{internalType:"bytes32",name:"blockHash",type:"bytes32"},{components:[{internalType:"bool",name:"success",type:"bool"},{internalType:"bytes",name:"returnData",type:"bytes"}],internalType:"struct Multicall3.Result[]",name:"returnData",type:"tuple[]"}],stateMutability:"payable",type:"function"}];var S=class{network;constructor(e){this.network=e,this.init();}Network(){return this.network}};var N=class extends S{publicClient;walletClient;chain;rpcUrl;init(){let{name:e,symbol:t,decimals:a}=this.network.currencies.find(({contract_address:r})=>r===void 0)||{name:"Ether",symbol:"ETH",decimals:18};this.rpcUrl=this.network.rpcUrl,this.chain=defineChain({id:Number(this.network.chainId),name:this.network.name,rpcUrls:{default:{http:[this.network.rpcUrl]}},nativeCurrency:{name:e,symbol:t,decimals:a}}),this.publicClient=createPublicClient({transport:http(this.network.rpcUrl),chain:this.chain}),this.walletClient=createWalletClient({transport:http(this.network.rpcUrl),chain:this.chain});}async GetBalances(e){let t=getContract({abi:te,address:this.network.multiCallContractAddress,client:this.publicClient}),a=this.network.currencies.map(({contract_address:p})=>p?{target:p,callData:encodeFunctionData({abi:erc20Abi,functionName:"balanceOf",args:[e.address]}),gasLimit:30000n}:{target:t.address,callData:encodeFunctionData({abi:te,functionName:"getEthBalance",args:[e.address]}),gasLimit:30000n}),{result:[r,s]}=await t.simulate.aggregate([a]),o=s.map((p,b)=>{let f=this.network.currencies[b]?.contract_address,l=this.network.currencies[b]?.symbol,y=0n;return f?y=decodeFunctionResult({abi:erc20Abi,functionName:"balanceOf",data:p}):y=decodeFunctionResult({abi:te,functionName:"getEthBalance",data:p}),y?{balance:y,symbol:l}:null}).filter(p=>p!==null).reduce((p,b,f)=>(p[b.symbol]=b.balance,p),{});return e.SetBalances(this.network,o),e.balances}async GetBalance(e,t){let a=this.network.currencies.find(s=>s.symbol===t);if(!a)throw new Error(`Token ${t} not found.`);let r=0n;return a.contract_address||(r=await getBalance(this.publicClient,{address:e.address})),r=await readContract(this.publicClient,{address:a.contract_address,abi:erc20Abi,functionName:"balanceOf",args:[e.address]}),e.SetBalance(t,r),r}async SignTransaction(e,t){let a=await this.walletClient.signTransaction(t);return this.walletClient.sendRawTransaction({serializedTransaction:a})}async _PrepareTx({privateKey:e},t,a,r){let s=this.network.currencies.find(f=>f.symbol===r);if(!s)throw new Error(`Token ${r} not found.`);let i=privateKeyToAccount(e),o={account:i,chain:this.walletClient.chain};if(s.contract_address===void 0){let f=await this.publicClient.estimateGas({account:i,to:t,value:parseEther(a)}).then(l=>l).catch(()=>21000n);return this.walletClient.prepareTransactionRequest({...o,to:t,value:parseEther(a),gas:f})}let p=encodeFunctionData({abi:erc20Abi,functionName:"transfer",args:[t,parseUnits(a,s.decimals)]}),b=await this.publicClient.estimateContractGas({account:i,address:s.contract_address,abi:erc20Abi,functionName:"transfer",args:[t,parseUnits(a,s.decimals)]}).then(f=>f).catch(()=>65000n);return this.walletClient.prepareTransactionRequest({...o,to:s.contract_address,gas:b,data:p,value:0n})}async SendToAddress(e,t,a,r,s){let i=await this._PrepareTx(e,t,a,r),o=await this.walletClient.signTransaction(i);return this.walletClient.sendRawTransaction({serializedTransaction:o})}async EstimateFee(e,t,a,r){let s=await this._PrepareTx(e,t,a,r);return s?s.maxFeePerGas*s.gas:0n}FeeToAmount(e){return e}async CreateReferenceToERC20(e){return getContract({address:e,abi:erc20Abi,client:this.walletClient})}async CreateReferenceToCSUC(){let{Main:e}=_.DeploymentAddresses["ethereum-sepolia"];return getContract({address:e,abi:W.abi,client:this.walletClient})}};function I(d,e){if(e===void 0)return d;let t=a=>typeof a=="number"||!Number.isNaN(Number(a));return d.filter(a=>{if(Array.isArray(e)){if(e.every(r=>t(r)))return e.map(r=>Number(r)).includes(a.id);if(e.every(r=>typeof r=="string"))return e.map(r=>g(r)).includes(g(a.name))}else return typeof e=="boolean"?a.testnet===e:typeof e=="function"?e(a):t(e)?Number(e)===a.id:g(e)===g(a.name)})}var D=class{rpcs=[];constructor(e){this.rpcs=e;}GetBalances(e){let t=this.rpcs.find(a=>a.Network().id===e.networkId);if(!t&&e.networkId===-1)throw new Error(`There is no adequate RPC for stealth address with network ID ${e.networkId}`);return t?.GetBalances(e)||Promise.resolve({})}Network(e){let t=this.rpcs.filter(a=>I([a.Network()],e).length);if(t.length===0)throw new Error(`Expected exactly one, but no network found with filter ${e}`);if(t.length>1)throw new Error(`Expected exactly one, but more than one network found with filter ${e}`);return t[0]}CreateReferenceToERC20(e,t){if(e.networkId!==1)throw new Error(`CreateReferenceERC20 is only supported on sepolia (network ID 1), but stealth address has network ID ${e.networkId}`);for(let a of this.rpcs)if(a.Network().id===1)return a.CreateReferenceToERC20(t);return Promise.reject(new Error(`No RPC found for creating reference to CSUC for stealth address with network ID ${e.networkId}`))}CreateReferenceToCSUC(e){if(e.networkId!==1)throw new Error(`CreateReferenceToCSUC is only supported on sepolia (network ID 1), but stealth address has network ID ${e.networkId}`);for(let t of this.rpcs)if(t.Network().id===1)return t.CreateReferenceToCSUC();return Promise.reject(new Error(`No RPC found for creating reference to CSUC for stealth address with network ID ${e.networkId}`))}};var ae=[{type:"impl",name:"EthAccountMixinImpl",interface_name:"openzeppelin_account::interface::EthAccountABI"},{type:"struct",name:"core::array::Span::<core::felt252>",members:[{name:"snapshot",type:"@core::array::Array::<core::felt252>"}]},{type:"struct",name:"core::starknet::account::Call",members:[{name:"to",type:"core::starknet::contract_address::ContractAddress"},{name:"selector",type:"core::felt252"},{name:"calldata",type:"core::array::Span::<core::felt252>"}]},{type:"enum",name:"core::bool",variants:[{name:"False",type:"()"},{name:"True",type:"()"}]},{type:"interface",name:"openzeppelin_account::interface::EthAccountABI",items:[{type:"function",name:"__execute__",inputs:[{name:"calls",type:"core::array::Array::<core::starknet::account::Call>"}],outputs:[{type:"core::array::Array::<core::array::Span::<core::felt252>>"}],state_mutability:"view"},{type:"function",name:"__validate__",inputs:[{name:"calls",type:"core::array::Array::<core::starknet::account::Call>"}],outputs:[{type:"core::felt252"}],state_mutability:"view"},{type:"function",name:"is_valid_signature",inputs:[{name:"hash",type:"core::felt252"},{name:"signature",type:"core::array::Array::<core::felt252>"}],outputs:[{type:"core::felt252"}],state_mutability:"view"},{type:"function",name:"supports_interface",inputs:[{name:"interface_id",type:"core::felt252"}],outputs:[{type:"core::bool"}],state_mutability:"view"},{type:"function",name:"__validate_declare__",inputs:[{name:"class_hash",type:"core::felt252"}],outputs:[{type:"core::felt252"}],state_mutability:"view"},{type:"function",name:"__validate_deploy__",inputs:[{name:"class_hash",type:"core::felt252"},{name:"contract_address_salt",type:"core::felt252"},{name:"public_key",type:"core::starknet::secp256k1::Secp256k1Point"}],outputs:[{type:"core::felt252"}],state_mutability:"view"},{type:"function",name:"get_public_key",inputs:[],outputs:[{type:"core::starknet::secp256k1::Secp256k1Point"}],state_mutability:"view"},{type:"function",name:"set_public_key",inputs:[{name:"new_public_key",type:"core::starknet::secp256k1::Secp256k1Point"},{name:"signature",type:"core::array::Span::<core::felt252>"}],outputs:[],state_mutability:"external"},{type:"function",name:"isValidSignature",inputs:[{name:"hash",type:"core::felt252"},{name:"signature",type:"core::array::Array::<core::felt252>"}],outputs:[{type:"core::felt252"}],state_mutability:"view"},{type:"function",name:"getPublicKey",inputs:[],outputs:[{type:"core::starknet::secp256k1::Secp256k1Point"}],state_mutability:"view"},{type:"function",name:"setPublicKey",inputs:[{name:"newPublicKey",type:"core::starknet::secp256k1::Secp256k1Point"},{name:"signature",type:"core::array::Span::<core::felt252>"}],outputs:[],state_mutability:"external"}]},{type:"constructor",name:"constructor",inputs:[{name:"public_key",type:"core::starknet::secp256k1::Secp256k1Point"}]},{type:"event",name:"openzeppelin_account::eth_account::EthAccountComponent::OwnerAdded",kind:"struct",members:[{name:"new_owner_guid",type:"core::felt252",kind:"key"}]},{type:"event",name:"openzeppelin_account::eth_account::EthAccountComponent::OwnerRemoved",kind:"struct",members:[{name:"removed_owner_guid",type:"core::felt252",kind:"key"}]},{type:"event",name:"openzeppelin_account::eth_account::EthAccountComponent::Event",kind:"enum",variants:[{name:"OwnerAdded",type:"openzeppelin_account::eth_account::EthAccountComponent::OwnerAdded",kind:"nested"},{name:"OwnerRemoved",type:"openzeppelin_account::eth_account::EthAccountComponent::OwnerRemoved",kind:"nested"}]},{type:"event",name:"openzeppelin_introspection::src5::SRC5Component::Event",kind:"enum",variants:[]},{type:"event",name:"curvy_account::AccountV0::Event",kind:"enum",variants:[{name:"EthAccountEvent",type:"openzeppelin_account::eth_account::EthAccountComponent::Event",kind:"flat"},{name:"SRC5Event",type:"openzeppelin_introspection::src5::SRC5Component::Event",kind:"flat"}]}];var ue=[{type:"impl",name:"MintableToken",interface_name:"src::mintable_token_interface::IMintableToken"},{type:"struct",name:"core::integer::u256",members:[{name:"low",type:"core::integer::u128"},{name:"high",type:"core::integer::u128"}]},{type:"interface",name:"src::mintable_token_interface::IMintableToken",items:[{type:"function",name:"permissioned_mint",inputs:[{name:"account",type:"core::starknet::contract_address::ContractAddress"},{name:"amount",type:"core::integer::u256"}],outputs:[],state_mutability:"external"},{type:"function",name:"permissioned_burn",inputs:[{name:"account",type:"core::starknet::contract_address::ContractAddress"},{name:"amount",type:"core::integer::u256"}],outputs:[],state_mutability:"external"}]},{type:"impl",name:"MintableTokenCamelImpl",interface_name:"src::mintable_token_interface::IMintableTokenCamel"},{type:"interface",name:"src::mintable_token_interface::IMintableTokenCamel",items:[{type:"function",name:"permissionedMint",inputs:[{name:"account",type:"core::starknet::contract_address::ContractAddress"},{name:"amount",type:"core::integer::u256"}],outputs:[],state_mutability:"external"},{type:"function",name:"permissionedBurn",inputs:[{name:"account",type:"core::starknet::contract_address::ContractAddress"},{name:"amount",type:"core::integer::u256"}],outputs:[],state_mutability:"external"}]},{type:"impl",name:"Replaceable",interface_name:"src::replaceability_interface::IReplaceable"},{type:"struct",name:"core::array::Span::<core::felt252>",members:[{name:"snapshot",type:"@core::array::Array::<core::felt252>"}]},{type:"struct",name:"src::replaceability_interface::EICData",members:[{name:"eic_hash",type:"core::starknet::class_hash::ClassHash"},{name:"eic_init_data",type:"core::array::Span::<core::felt252>"}]},{type:"enum",name:"core::option::Option::<src::replaceability_interface::EICData>",variants:[{name:"Some",type:"src::replaceability_interface::EICData"},{name:"None",type:"()"}]},{type:"enum",name:"core::bool",variants:[{name:"False",type:"()"},{name:"True",type:"()"}]},{type:"struct",name:"src::replaceability_interface::ImplementationData",members:[{name:"impl_hash",type:"core::starknet::class_hash::ClassHash"},{name:"eic_data",type:"core::option::Option::<src::replaceability_interface::EICData>"},{name:"final",type:"core::bool"}]},{type:"interface",name:"src::replaceability_interface::IReplaceable",items:[{type:"function",name:"get_upgrade_delay",inputs:[],outputs:[{type:"core::integer::u64"}],state_mutability:"view"},{type:"function",name:"get_impl_activation_time",inputs:[{name:"implementation_data",type:"src::replaceability_interface::ImplementationData"}],outputs:[{type:"core::integer::u64"}],state_mutability:"view"},{type:"function",name:"add_new_implementation",inputs:[{name:"implementation_data",type:"src::replaceability_interface::ImplementationData"}],outputs:[],state_mutability:"external"},{type:"function",name:"remove_implementation",inputs:[{name:"implementation_data",type:"src::replaceability_interface::ImplementationData"}],outputs:[],state_mutability:"external"},{type:"function",name:"replace_to",inputs:[{name:"implementation_data",type:"src::replaceability_interface::ImplementationData"}],outputs:[],state_mutability:"external"}]},{type:"impl",name:"AccessControlImplExternal",interface_name:"src::access_control_interface::IAccessControl"},{type:"interface",name:"src::access_control_interface::IAccessControl",items:[{type:"function",name:"has_role",inputs:[{name:"role",type:"core::felt252"},{name:"account",type:"core::starknet::contract_address::ContractAddress"}],outputs:[{type:"core::bool"}],state_mutability:"view"},{type:"function",name:"get_role_admin",inputs:[{name:"role",type:"core::felt252"}],outputs:[{type:"core::felt252"}],state_mutability:"view"}]},{type:"impl",name:"RolesImpl",interface_name:"src::roles_interface::IMinimalRoles"},{type:"interface",name:"src::roles_interface::IMinimalRoles",items:[{type:"function",name:"is_governance_admin",inputs:[{name:"account",type:"core::starknet::contract_address::ContractAddress"}],outputs:[{type:"core::bool"}],state_mutability:"view"},{type:"function",name:"is_upgrade_governor",inputs:[{name:"account",type:"core::starknet::contract_address::ContractAddress"}],outputs:[{type:"core::bool"}],state_mutability:"view"},{type:"function",name:"register_governance_admin",inputs:[{name:"account",type:"core::starknet::contract_address::ContractAddress"}],outputs:[],state_mutability:"external"},{type:"function",name:"remove_governance_admin",inputs:[{name:"account",type:"core::starknet::contract_address::ContractAddress"}],outputs:[],state_mutability:"external"},{type:"function",name:"register_upgrade_governor",inputs:[{name:"account",type:"core::starknet::contract_address::ContractAddress"}],outputs:[],state_mutability:"external"},{type:"function",name:"remove_upgrade_governor",inputs:[{name:"account",type:"core::starknet::contract_address::ContractAddress"}],outputs:[],state_mutability:"external"},{type:"function",name:"renounce",inputs:[{name:"role",type:"core::felt252"}],outputs:[],state_mutability:"external"}]},{type:"impl",name:"ERC20Impl",interface_name:"openzeppelin::token::erc20::interface::IERC20"},{type:"interface",name:"openzeppelin::token::erc20::interface::IERC20",items:[{type:"function",name:"name",inputs:[],outputs:[{type:"core::felt252"}],state_mutability:"view"},{type:"function",name:"symbol",inputs:[],outputs:[{type:"core::felt252"}],state_mutability:"view"},{type:"function",name:"decimals",inputs:[],outputs:[{type:"core::integer::u8"}],state_mutability:"view"},{type:"function",name:"total_supply",inputs:[],outputs:[{type:"core::integer::u256"}],state_mutability:"view"},{type:"function",name:"balance_of",inputs:[{name:"account",type:"core::starknet::contract_address::ContractAddress"}],outputs:[{type:"core::integer::u256"}],state_mutability:"view"},{type:"function",name:"allowance",inputs:[{name:"owner",type:"core::starknet::contract_address::ContractAddress"},{name:"spender",type:"core::starknet::contract_address::ContractAddress"}],outputs:[{type:"core::integer::u256"}],state_mutability:"view"},{type:"function",name:"transfer",inputs:[{name:"recipient",type:"core::starknet::contract_address::ContractAddress"},{name:"amount",type:"core::integer::u256"}],outputs:[{type:"core::bool"}],state_mutability:"external"},{type:"function",name:"transfer_from",inputs:[{name:"sender",type:"core::starknet::contract_address::ContractAddress"},{name:"recipient",type:"core::starknet::contract_address::ContractAddress"},{name:"amount",type:"core::integer::u256"}],outputs:[{type:"core::bool"}],state_mutability:"external"},{type:"function",name:"approve",inputs:[{name:"spender",type:"core::starknet::contract_address::ContractAddress"},{name:"amount",type:"core::integer::u256"}],outputs:[{type:"core::bool"}],state_mutability:"external"}]},{type:"impl",name:"ERC20CamelOnlyImpl",interface_name:"openzeppelin::token::erc20::interface::IERC20CamelOnly"},{type:"interface",name:"openzeppelin::token::erc20::interface::IERC20CamelOnly",items:[{type:"function",name:"totalSupply",inputs:[],outputs:[{type:"core::integer::u256"}],state_mutability:"view"},{type:"function",name:"balanceOf",inputs:[{name:"account",type:"core::starknet::contract_address::ContractAddress"}],outputs:[{type:"core::integer::u256"}],state_mutability:"view"},{type:"function",name:"transferFrom",inputs:[{name:"sender",type:"core::starknet::contract_address::ContractAddress"},{name:"recipient",type:"core::starknet::contract_address::ContractAddress"},{name:"amount",type:"core::integer::u256"}],outputs:[{type:"core::bool"}],state_mutability:"external"}]},{type:"constructor",name:"constructor",inputs:[{name:"name",type:"core::felt252"},{name:"symbol",type:"core::felt252"},{name:"decimals",type:"core::integer::u8"},{name:"initial_supply",type:"core::integer::u256"},{name:"recipient",type:"core::starknet::contract_address::ContractAddress"},{name:"permitted_minter",type:"core::starknet::contract_address::ContractAddress"},{name:"provisional_governance_admin",type:"core::starknet::contract_address::ContractAddress"},{name:"upgrade_delay",type:"core::integer::u64"}]},{type:"function",name:"increase_allowance",inputs:[{name:"spender",type:"core::starknet::contract_address::ContractAddress"},{name:"added_value",type:"core::integer::u256"}],outputs:[{type:"core::bool"}],state_mutability:"external"},{type:"function",name:"decrease_allowance",inputs:[{name:"spender",type:"core::starknet::contract_address::ContractAddress"},{name:"subtracted_value",type:"core::integer::u256"}],outputs:[{type:"core::bool"}],state_mutability:"external"},{type:"function",name:"increaseAllowance",inputs:[{name:"spender",type:"core::starknet::contract_address::ContractAddress"},{name:"addedValue",type:"core::integer::u256"}],outputs:[{type:"core::bool"}],state_mutability:"external"},{type:"function",name:"decreaseAllowance",inputs:[{name:"spender",type:"core::starknet::contract_address::ContractAddress"},{name:"subtractedValue",type:"core::integer::u256"}],outputs:[{type:"core::bool"}],state_mutability:"external"},{type:"event",name:"openzeppelin::token::erc20_v070::erc20::ERC20::Transfer",kind:"struct",members:[{name:"from",type:"core::starknet::contract_address::ContractAddress",kind:"data"},{name:"to",type:"core::starknet::contract_address::ContractAddress",kind:"data"},{name:"value",type:"core::integer::u256",kind:"data"}]},{type:"event",name:"openzeppelin::token::erc20_v070::erc20::ERC20::Approval",kind:"struct",members:[{name:"owner",type:"core::starknet::contract_address::ContractAddress",kind:"data"},{name:"spender",type:"core::starknet::contract_address::ContractAddress",kind:"data"},{name:"value",type:"core::integer::u256",kind:"data"}]},{type:"event",name:"src::replaceability_interface::ImplementationAdded",kind:"struct",members:[{name:"implementation_data",type:"src::replaceability_interface::ImplementationData",kind:"data"}]},{type:"event",name:"src::replaceability_interface::ImplementationRemoved",kind:"struct",members:[{name:"implementation_data",type:"src::replaceability_interface::ImplementationData",kind:"data"}]},{type:"event",name:"src::replaceability_interface::ImplementationReplaced",kind:"struct",members:[{name:"implementation_data",type:"src::replaceability_interface::ImplementationData",kind:"data"}]},{type:"event",name:"src::replaceability_interface::ImplementationFinalized",kind:"struct",members:[{name:"impl_hash",type:"core::starknet::class_hash::ClassHash",kind:"data"}]},{type:"event",name:"src::access_control_interface::RoleGranted",kind:"struct",members:[{name:"role",type:"core::felt252",kind:"data"},{name:"account",type:"core::starknet::contract_address::ContractAddress",kind:"data"},{name:"sender",type:"core::starknet::contract_address::ContractAddress",kind:"data"}]},{type:"event",name:"src::access_control_interface::RoleRevoked",kind:"struct",members:[{name:"role",type:"core::felt252",kind:"data"},{name:"account",type:"core::starknet::contract_address::ContractAddress",kind:"data"},{name:"sender",type:"core::starknet::contract_address::ContractAddress",kind:"data"}]},{type:"event",name:"src::access_control_interface::RoleAdminChanged",kind:"struct",members:[{name:"role",type:"core::felt252",kind:"data"},{name:"previous_admin_role",type:"core::felt252",kind:"data"},{name:"new_admin_role",type:"core::felt252",kind:"data"}]},{type:"event",name:"src::roles_interface::GovernanceAdminAdded",kind:"struct",members:[{name:"added_account",type:"core::starknet::contract_address::ContractAddress",kind:"data"},{name:"added_by",type:"core::starknet::contract_address::ContractAddress",kind:"data"}]},{type:"event",name:"src::roles_interface::GovernanceAdminRemoved",kind:"struct",members:[{name:"removed_account",type:"core::starknet::contract_address::ContractAddress",kind:"data"},{name:"removed_by",type:"core::starknet::contract_address::ContractAddress",kind:"data"}]},{type:"event",name:"src::roles_interface::UpgradeGovernorAdded",kind:"struct",members:[{name:"added_account",type:"core::starknet::contract_address::ContractAddress",kind:"data"},{name:"added_by",type:"core::starknet::contract_address::ContractAddress",kind:"data"}]},{type:"event",name:"src::roles_interface::UpgradeGovernorRemoved",kind:"struct",members:[{name:"removed_account",type:"core::starknet::contract_address::ContractAddress",kind:"data"},{name:"removed_by",type:"core::starknet::contract_address::ContractAddress",kind:"data"}]},{type:"event",name:"openzeppelin::token::erc20_v070::erc20::ERC20::Event",kind:"enum",variants:[{name:"Transfer",type:"openzeppelin::token::erc20_v070::erc20::ERC20::Transfer",kind:"nested"},{name:"Approval",type:"openzeppelin::token::erc20_v070::erc20::ERC20::Approval",kind:"nested"},{name:"ImplementationAdded",type:"src::replaceability_interface::ImplementationAdded",kind:"nested"},{name:"ImplementationRemoved",type:"src::replaceability_interface::ImplementationRemoved",kind:"nested"},{name:"ImplementationReplaced",type:"src::replaceability_interface::ImplementationReplaced",kind:"nested"},{name:"ImplementationFinalized",type:"src::replaceability_interface::ImplementationFinalized",kind:"nested"},{name:"RoleGranted",type:"src::access_control_interface::RoleGranted",kind:"nested"},{name:"RoleRevoked",type:"src::access_control_interface::RoleRevoked",kind:"nested"},{name:"RoleAdminChanged",type:"src::access_control_interface::RoleAdminChanged",kind:"nested"},{name:"GovernanceAdminAdded",type:"src::roles_interface::GovernanceAdminAdded",kind:"nested"},{name:"GovernanceAdminRemoved",type:"src::roles_interface::GovernanceAdminRemoved",kind:"nested"},{name:"UpgradeGovernorAdded",type:"src::roles_interface::UpgradeGovernorAdded",kind:"nested"},{name:"UpgradeGovernorRemoved",type:"src::roles_interface::UpgradeGovernorRemoved",kind:"nested"}]}];var ye=[{type:"impl",name:"ComposableMulticallImpl",interface_name:"composable_multicall::IComposableMulticall"},{type:"enum",name:"composable_multicall::Execution",variants:[{name:"Static",type:"()"},{name:"IfEqual",type:"(core::integer::u32, core::integer::u32, core::felt252)"},{name:"IfNotEqual",type:"(core::integer::u32, core::integer::u32, core::felt252)"}]},{type:"enum",name:"composable_multicall::DynamicFelt",variants:[{name:"Hardcoded",type:"core::felt252"},{name:"Reference",type:"(core::integer::u32, core::integer::u32)"}]},{type:"enum",name:"composable_multicall::DynamicCalldata",variants:[{name:"Hardcoded",type:"core::felt252"},{name:"Reference",type:"(core::integer::u32, core::integer::u32)"},{name:"ArrayReference",type:"(core::integer::u32, core::integer::u32)"}]},{type:"struct",name:"composable_multicall::DynamicCall",members:[{name:"execution",type:"composable_multicall::Execution"},{name:"to",type:"composable_multicall::DynamicFelt"},{name:"selector",type:"composable_multicall::DynamicFelt"},{name:"calldata",type:"core::array::Array::<composable_multicall::DynamicCalldata>"}]},{type:"struct",name:"core::array::Span::<core::felt252>",members:[{name:"snapshot",type:"@core::array::Array::<core::felt252>"}]},{type:"interface",name:"composable_multicall::IComposableMulticall",items:[{type:"function",name:"aggregate",inputs:[{name:"calls",type:"core::array::Array::<composable_multicall::DynamicCall>"}],outputs:[{type:"core::array::Array::<core::array::Span::<core::felt252>>"}],state_mutability:"view"}]},{type:"event",name:"composable_multicall::contract::ComposableMulticall::Event",kind:"enum",variants:[]}];function Oe(d,e){let t=BigInt(d),r=BigInt(e)<<128n;return t+r}var F=class extends S{provider;init(){this.provider=new Provider({chainId:constants.StarknetChainId.SN_MAIN,nodeUrl:this.network.rpcUrl});}async GetBalances(e){let t=new Contract(ye,this.network.multiCallContractAddress,this.provider).typedv2(ye),a=this.network.currencies.map(({contract_address:o})=>({execution:new CairoCustomEnum({Static:{}}),to:new CairoCustomEnum({Hardcoded:o}),selector:new CairoCustomEnum({Hardcoded:hash.getSelectorFromName("balance_of")}),calldata:[new CairoCustomEnum({Hardcoded:e.address})]})),i=(await t.aggregate(a)).map(([o,p],b)=>({balance:Oe(o,p),symbol:this.network.currencies[b].symbol})).filter(o=>!!o.balance).reduce((o,p,b)=>(o[p.symbol]=p.balance,o),{});return e.SetBalances(this.network,i),e.balances}async GetBalance(e,t){let a=this.network.currencies.find(i=>i.symbol===t);if(!a)throw new Error(`Token ${t} not found.`);let s=await new Contract(ue,a.contract_address,this.provider).typedv2(ue).balance_of(e.address);return typeof s=="number"&&(s=BigInt(s)),typeof s!="bigint"&&"low"in s&&"high"in s&&(s=Oe(s.low,s.high)),e.SetBalance(t,s),s}_PrepareTx(e,t,a,r){let s=this.network.currencies.find(p=>p.symbol===r);if(!s)throw new Error(`Token ${r} not found.`);let i=new Account(this.provider,e.address,new EthSigner(e.privateKey)),o={contractAddress:s.contract_address,entrypoint:"transfer",calldata:CallData.compile({to:t,amount:cairo.uint256(parseUnits(a,s?.decimals))})};return {starknetAccount:i,txPayload:o}}async _EstimateFee(e,t){return e.estimateFee(t,{version:3,skipValidate:false,resourceBounds:{l1_gas:{max_amount:"0x0",max_price_per_unit:"0x0"},l2_gas:{max_amount:"0x0",max_price_per_unit:"0x0"},l1_data_gas:{max_amount:"0x0",max_price_per_unit:"0x0"}}})}async _CheckIsStarknetAccountDeployed(e){return this.provider.getClassHashAt(e.address).then(()=>true).catch(()=>false)}_GetStarknetAccountClassHash(e,t,a="0x3327"){return P.find(r=>{let s=hash.calculateContractAddressFromHash(a,r,t,0);if(validateAndParseAddress(s)===validateAndParseAddress(e))return r})}async _PrepareDeploy(e){let t=new Account(this.provider,e.address,new EthSigner(e.privateKey)),a=H(e.publicKey,false),s=new CallData(ae).compile("constructor",{public_key:a}),i=this._GetStarknetAccountClassHash(e.address,s);if(!i)throw new Error("Tried to construct deploy payload with unsupported class hash!");return {starknetAccount:t,deployPayload:{classHash:i,constructorCalldata:s,addressSalt:"0x3327"}}}async _EstimateDeployFee(e){let{starknetAccount:t,deployPayload:a}=await this._PrepareDeploy(e);return t.estimateAccountDeployFee(a,{version:3,skipValidate:false,resourceBounds:{l1_gas:{max_amount:"0xffffffffffffffff",max_price_per_unit:"0x0"},l2_gas:{max_amount:"0xffffffffffffffff",max_price_per_unit:"0x0"},l1_data_gas:{max_amount:"0xffffffffffffffff",max_price_per_unit:"0x0"}}})}async EstimateDeployFee(e,t=false){if(!t&&await this._CheckIsStarknetAccountDeployed(e))throw new Error(`Starknet account with address: ${e.address} already deployed.`);return (await this._EstimateDeployFee(e)).overall_fee}async DeployStarknetAccount(e,t=false,a){if(!t&&await this._CheckIsStarknetAccountDeployed(e))throw new Error(`Starknet account with address: ${e.address} already deployed.`);let{starknetAccount:r,deployPayload:s}=await this._PrepareDeploy(e),i;return a===void 0?i=await this._EstimateDeployFee(e):i=a,r.deployAccount(s,{version:3,resourceBounds:i.resourceBounds,maxFee:i.suggestedMaxFee})}async SendToAddress(e,t,a,r,s){await this._CheckIsStarknetAccountDeployed(e)||await this.DeployStarknetAccount(e,true,s?.[1]);let{starknetAccount:i,txPayload:o}=this._PrepareTx(e,t,a,r),p;return s?.[0]===void 0?p=await this._EstimateFee(i,o):p=s?.[0],(await i.execute([o],{version:3,resourceBounds:p.resourceBounds,maxFee:p.suggestedMaxFee})).transaction_hash}async EstimateFee(e,t,a,r){let s,i=await this._CheckIsStarknetAccountDeployed(e);i||(s=await this._EstimateDeployFee(e));let{starknetAccount:o,txPayload:p}=this._PrepareTx(e,t,a,r);return i||(o=new Account(this.provider,fe.address,fe.pk)),[await this._EstimateFee(o,p),s]}FeeToAmount(e){return BigInt(e[0].overall_fee)+BigInt(e[1]?.overall_fee??0n)}};async function u1(d){let e;switch(d.flavour){case "evm":e=new N(d);break;case "starknet":e=new F(d);break;default:throw Error("Unknown network flavour")}return await e.init(),e}async function Ge(d){let e=d.map(async a=>await u1(a)),t=await Promise.all(e);return new D(t)}var se=(d,e)=>{if(!d||!e)return "";let t=H(d,false);switch(e){case "starknet":{let r=new CallData(ae).compile("constructor",{public_key:t}),i=hash.calculateContractAddressFromHash("0x3327",P[P.length-1],r,0);return validateAndParseAddress(i)}case "evm":return computeAddress(t)}};var re=class{balances={};nonces={};SetCSAInfo(e,t,a){for(let[r,s]of t.entries()){let i=BigInt(s.amount);if(i===0n)continue;let o=w.EVM.Token.getTokenSymbol(g(e.name),s.token);this.balances[`${g(e.name)}:${o}`]=i,this.nonces[`${g(e.name)}:${o}`]=BigInt(a[r].value);}}getNonce(e,t){let a=`${e}:${t}`;if(!(a in this.nonces))throw new Error(`Getting nonce for key:'${a}' failed: Nonce not found!`);return this.nonces[a]}};var B=class d{privateKey;publicKey;address;flavour;networkId;balances;CSUC=new re;constructor(e,t,a,r){this.privateKey=e||"",this.publicKey=t||"",this.balances={},this.networkId=a||-1,this.flavour=r,this.address=se(this.publicKey,r);}static fromAddress(e){let t=new d;return t.address=e,t}SetBalance(e,t){this.balances[e]=t;}SetBalances(e,t){for(let a in t)this.balances[`${g(e.name)}:${a}`]=t[a];}};var O=class{announcementStorage;core;emitter;wallets=[];constructor(e,t,a){this.announcementStorage=e,this.core=t,this.emitter=a;}GetWallets(){return this.wallets}async Scan(e,t){let r=0;for(let s=0;s<t.length;s+=250){let i=t.slice(s,s+250);for(let o of e){let p=o.GetKeyPairs(),b=this.core.scan(p.s,p.v,i);for(let f=0;f<b.spendingPubKeys.length;f++)if(b.spendingPubKeys[f]!==""){let l=new B(b.spendingPrivKeys[f],b.spendingPubKeys[f],i[f].network_id,i[f].networkFlavour);o.AddStealthAddress(l),r++,this.emitter.emitScanMatch({wallet:o,stealthAddress:l});}s+250>=t.length?this.emitter.emitScanComplete({scanned:t.length,matched:r,wallet:o,total:t.length}):this.emitter.emitScanProgress({scanned:t.length,wallet:o,total:t.length});}}}async AddWallet(e){let{announcements:t}=await this.announcementStorage.GetAnnouncements(),a=0;for(;t.length>0;)a+=t.length,await this.Scan([e],t),t=(await this.announcementStorage.GetAnnouncements({offset:a})).announcements;this.wallets.push(e);}};var ie=class{announcements=new Map;earliestTimestamp;latestTimestamp;async WriteAnnouncement(e){try{if(!e.id||!e.createdAt)throw new C("Invalid announcement: missing id or createdAt");let t=new Date(e.createdAt);(!this.earliestTimestamp||t<this.earliestTimestamp)&&(this.earliestTimestamp=t),(!this.latestTimestamp||t>this.latestTimestamp)&&(this.latestTimestamp=t),this.announcements.set(e.id,e);}catch(t){throw t instanceof C?t:new C("Failed to write announcement",t)}}async WriteManyAnnouncements(e){try{for(let t of e)await this.WriteAnnouncement(t);}catch(t){throw t instanceof C?t:new C("Failed to write announcements batch",t)}}async GetAnnouncements(e={}){try{let t=Array.from(this.announcements.values());e.startTime&&(t=t.filter(p=>e.startTime&&new Date(p.createdAt)>e.startTime)),e.endTime&&(t=t.filter(p=>e.endTime&&new Date(p.createdAt)<e.endTime)),e.networkId?.length&&(t=t.filter(p=>e.networkId?.includes(p.network_id)));let a=t.length,r=e.size??200,s=e.offset??0;t=t.slice(s,s+r);let i=t.length?new Date(t[t.length-1].createdAt):void 0,o=t.length?new Date(t[0].createdAt):void 0;return {announcements:t,total:a,oldestTimestamp:i,newestTimestamp:o}}catch(t){throw new C("Failed to query announcements",t)}}async GetEarliestTimestamp(){return this.earliestTimestamp}async GetLatestTimestamp(){return this.latestTimestamp}};var oe=class{storage;client;emitter;isSyncing=false;constructor(e,t,a){this.storage=e,this.client=t,this.emitter=a;}async Start(){await this.sync(),setInterval(async()=>{await this.sync();},6e4);}async sync(){if(this.isSyncing)return;this.isSyncing=true;let e=0,t=true;try{let a=Number.POSITIVE_INFINITY,r=await this.storage.GetLatestTimestamp(),s=!r,i=r,o;for(;e<a;){let p=await this.client.GetAnnouncements(i,o,200);t&&(a=p.total,this.emitter.emitSyncStarted({total:a}),t=!1);for(let b of p.announcements)await this.storage.WriteAnnouncement(b);e+=p.announcements.length,this.emitter.emitSyncProgress({synced:e,announcements:p.announcements,remaining:a-e}),s?o=await this.storage.GetEarliestTimestamp():i=await this.storage.GetLatestTimestamp();}this.emitter.emitSyncComplete({totalSynced:e});}catch(a){throw this.emitter.emitSyncError({error:a}),a}finally{this.isSyncing=false;}}};function He(d){return Array.from(new Uint8Array(d)).map(e=>e.toString(16).padStart(2,"0")).join("")}new TextEncoder;var Le=(d,e)=>{let[t,a]=[Qe([d,e]),Qe([e,d])];if(t===a)throw new Error("Error generating keys: k === v !");return [t,a]},Qe=d=>{let e=d.map(o=>`0x${o.toString(16).length%2===0?o.toString(16):`0${o.toString(16)}`}`),t=252,a=180,r=10n**70n,s=concat(e),i=keccak256$1(s).replace("0x","").slice(1);if(i.length*4>t)throw new Error(`Error generating hash: length over ${t} bits`);if(i.length*4<a)throw new Error(`Error generating hash: length under ${a} bits`);if(BigInt(`0x${i}`)<r)throw new Error(`Error generating hash: hashed value under ${r}`);return `0${i.padStart(t/4,"0")}`};var de=class{keyPairs;ownerAddress;curvyHandle;stealthAddresses=[];constructor(e,t,a){this.curvyHandle=e,this.ownerAddress=t,this.keyPairs=a;}GetKeyPairs(){return this.keyPairs}GetOwnerAddress(){return this.ownerAddress}GetCurvyHandle(){return this.curvyHandle}AddStealthAddress(e){this.stealthAddresses.push(e);}};var ce=class{client;networks=[];announcementStorage;emitter;syncer;scanner;core=new z;RPC;constructor(e,t,a){if(!e.apiKey&&!e.bearerToken)throw new Error("Either apiKey or bearerToken must be provided");if(e.apiKey&&e.bearerToken)throw new Error("Cannot provide both apiKey and bearerToken, choose one");this.client=new K(e,t),this.announcementStorage=a??new ie,this.emitter=new q,this.syncer=new oe(this.announcementStorage,this.client,this.emitter),this.scanner=new O(this.announcementStorage,this.core,this.emitter),this.emitter.on(M,async r=>{await this.scanner.Scan(this.scanner.GetWallets(),r.announcements);});}updateBearerToken(e){this.client.UpdateBearerToken(e);}async init(e,t){this.networks=await this.client.GetNetworks(),e===void 0?await this.SetActiveNetworks(true):await this.SetActiveNetworks(e),await z.init(t),this.syncer.Start().then(a=>{});}GetNetworkAndCurrencyFromBalanceIdentifier(e){let[t,a]=e.split(":"),r=this.GetNetworks(t);if(r.length!==1)return;let s=r[0].currencies.find(i=>i.symbol===a);if(s)return [r[0],s]}GetWallets(){return this.scanner.GetWallets()}GetStealthAddress(e){for(let t of this.scanner.GetWallets())for(let a of t.stealthAddresses)if(a.address===e)return a}GetNetworks(e=void 0){return I(this.networks,e)}GetNetwork(e=void 0){let t=I(this.networks,e);if(t.length===0)throw new Error(`Expected exactly one, but no network found with filter ${e}`);if(t.length>1)throw new Error(`Expected exactly one, but more than one network found with filter ${e}`);return t[0]}async GetNewStealthAddressForUser(e,t){let a=await this.client.ResolveUsername(t);if(!a)throw new Error(`Handle ${t} not found`);let{spendingKey:r,viewingKey:s}=a.publicKeys[0],{announcement:{recipientStealthPublicKey:i,ephemeralPublicKey:o,viewTag:p}}=this.core.send(r,s),b=this.GetNetwork(e),f=se(i,b.flavour);if(!f)throw new Error("Couldn't derive address!");if((await this.client.CreateAnnouncement({recipientStealthAddress:f,recipientStealthPublicKey:i,network_id:b.id,ephemeralPublicKey:o,viewTag:p})).data?.message!=="Saved")throw new Error("Failed to register announcement");return f}async Send(e,t,a,r,s,i){let o=a;return (a.endsWith(".staging-curvy.name")||a.endsWith(".curvy.name"))&&(o=await this.GetNewStealthAddressForUser(t,a)),this.RPC?.Network(t).SendToAddress(e,o,r,s,i)}async SetActiveNetworks(e){let t=this.GetNetworks(e);if(!t.length)throw new Error(`Network array is empty after filtering with ${e}`);this.RPC=await Ge(t);}async GetAnnouncements(e){return this.announcementStorage.GetAnnouncements(e)}GetNativeCurrencyForNetwork(e){if(e.flavour==="starknet"){let a=e.currencies.find(({symbol:r})=>r==="STRK");if(a)return a;throw new Error(`No native currency found for network ${e.name}`)}let t=e.currencies.find(({contract_address:a})=>a===void 0);if(!t)throw new Error(`No native currency found for network ${e.name}`);return t}async GetSignatureParamsForNetworkFlavour(e,t,a){let r=new TextEncoder,s=t;e==="evm"?s=getAddress(t):e==="starknet"&&(s=`0x${t.replace("0x","").padStart(64,"0")}`);let i=`${s}::${a}`,o=r.encode(i),p=await crypto.subtle.digest("SHA-512",o),b=He(p);switch(e){case "evm":return Ae(b);case "starknet":return xe(b);default:throw new Error(`Unrecognized network flavour: ${e}`)}}async AddWalletWithSignature(e,t){let a=BigInt(0),r=BigInt(0),s=e;if(Array.isArray(t))s=`0x${e.replace("0x","").padStart(64,"0")}`,t.length===2&&(r=BigInt(t[0]),a=BigInt(t[1])),t.length===5&&(r=BigInt(t[3]),a=BigInt(t[4])),t.length===3&&(r=BigInt(t[1]),a=BigInt(t[2]));else if(typeof t=="string"){let c=Signature.from(t);r=BigInt(c.r),a=BigInt(c.s);}if(a===BigInt(0)&&r===BigInt(0))throw new Error("Unrecognized signature format!");let[i,o]=Le(a,r),{S:p,V:b}=this.core.getPublicKeys(i,o),f={s:i,v:o,S:p,V:b},l=await this.client.GetCurvyHandleByOwnerAddress(s);if(!l)throw new Error(`No Curvy handle found for owner address: ${e}`);let y=await this.client.ResolveUsername(l);if(!y)throw new Error(`Handle ${l} does not exist.`);if(!y.publicKeys.some(({viewingKey:c,spendingKey:u})=>c===f.V&&u===f.S))throw new Error(`Wrong password for handle ${l}.`);let n=new de(l,s,f);return await this.scanner.AddWallet(n),n}Utils(){return {CSUC:w}}async RefreshBalances(){if(!this.RPC)throw new Error("RPC not initialized");for(let e of this.GetWallets()){for(let t of e.stealthAddresses)await this.RPC.GetBalances(t);for(let t of Object.values(T.SupportedNetworkId)){let a=e.stealthAddresses.filter(s=>s.networkId===t);if(a.length===0)continue;let{csaInfo:r}=await this.client.CSUC.GetCSAInfo({network:T.SupportedNetwork.ETHEREUM_SEPOLIA,csas:a.map(s=>s.address)});for(let[s,i]of a.entries()){let{network:o,balances:p,nonce:b}=r[s];i.CSUC.SetCSAInfo(this.GetNetwork(o),p,b);}}}}async OnboardToCSUC(e,t,a,r){let s=w.EVM.Token.parseDecimals(r,18),i=this.RPC?.Network(T.SupportedNetwork.ETHEREUM_SEPOLIA),o=await V.PrepareTransferIntoCSUC(i,e,t,a,s);return await this.client.GasSponsorship.SubmitRequest(o)}async EstimateActionInsideCSUC(e,t,a,r,s,i){i=w.EVM.Token.parseDecimals(i,18).toString();let o=await w.PrepareActionEstimationRequest(e,t,a,r,s,i);return (await this.client.CSUC.EstimateAction({payloads:[o]})).estimatedCosts[0]}async RequestActionInsideCSUC(e,t,a,r){let s=await w.PrepareActionRequest(e,t,a,r);return (await this.client.CSUC.SubmitActionRequest({actions:[s]})).actionStatuses[0]}onSyncStarted(e){this.emitter.on(Y,e);}onSyncProgress(e){this.emitter.on(M,e);}onSyncComplete(e){this.emitter.on(j,e);}onSyncError(e){this.emitter.on(Z,e);}onScanProgress(e){this.emitter.on($,e);}onScanComplete(e){this.emitter.on(X,e);}onScanMatch(e){this.emitter.on(J,e);}onScanError(e){this.emitter.on(ee,e);}};var v1=async(d,e,t=void 0,a)=>{let r=new ce(d,e);return await r.init(t,a),r};export{k as APIError,Te as AnnouncementSyncError,re as CSUC,x as CurvyError,X as SCAN_COMPLETE_EVENT,ee as SCAN_ERROR_EVENT,J as SCAN_MATCH_EVENT,$ as SCAN_PROGRESS_EVENT,j as SYNC_COMPLETE_EVENT,Z as SYNC_ERROR_EVENT,M as SYNC_PROGRESS_EVENT,Y as SYNC_STARTED_EVENT,C as StorageError,Ce as TypesCSUC,_e as UtilsCSUC,I as filterNetworks,v1 as init};