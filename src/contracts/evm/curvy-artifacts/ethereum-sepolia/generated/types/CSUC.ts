/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from 'ethers';
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from './common.js';

export declare namespace CSUC_Types {
  export type ActionHandlingInfoStruct = {
    mandatoryFeePoints: BigNumberish;
    handler: AddressLike;
  };

  export type ActionHandlingInfoStructOutput = [
    mandatoryFeePoints: bigint,
    handler: string,
  ] & { mandatoryFeePoints: bigint; handler: string };

  export type ActionHandlingInfoUpdateStruct = {
    actionId: BigNumberish;
    info: CSUC_Types.ActionHandlingInfoStruct;
  };

  export type ActionHandlingInfoUpdateStructOutput = [
    actionId: bigint,
    info: CSUC_Types.ActionHandlingInfoStructOutput,
  ] & { actionId: bigint; info: CSUC_Types.ActionHandlingInfoStructOutput };

  export type ConfigUpdateStruct = {
    newOperator: AddressLike;
    newFeeCollector: AddressLike;
    actionHandlingInfoUpdate: CSUC_Types.ActionHandlingInfoUpdateStruct[];
  };

  export type ConfigUpdateStructOutput = [
    newOperator: string,
    newFeeCollector: string,
    actionHandlingInfoUpdate: CSUC_Types.ActionHandlingInfoUpdateStructOutput[],
  ] & {
    newOperator: string;
    newFeeCollector: string;
    actionHandlingInfoUpdate: CSUC_Types.ActionHandlingInfoUpdateStructOutput[];
  };

  export type ActionPayloadStruct = {
    token: AddressLike;
    actionId: BigNumberish;
    amount: BigNumberish;
    totalFee: BigNumberish;
    limit: BigNumberish;
    parameters: BytesLike;
  };

  export type ActionPayloadStructOutput = [
    token: string,
    actionId: bigint,
    amount: bigint,
    totalFee: bigint,
    limit: bigint,
    parameters: string,
  ] & {
    token: string;
    actionId: bigint;
    amount: bigint;
    totalFee: bigint;
    limit: bigint;
    parameters: string;
  };

  export type ActionStruct = {
    from: AddressLike;
    signature_v: BigNumberish;
    signature_r: BytesLike;
    signature_s: BytesLike;
    payload: CSUC_Types.ActionPayloadStruct;
  };

  export type ActionStructOutput = [
    from: string,
    signature_v: bigint,
    signature_r: string,
    signature_s: string,
    payload: CSUC_Types.ActionPayloadStructOutput,
  ] & {
    from: string;
    signature_v: bigint;
    signature_r: string;
    signature_s: string;
    payload: CSUC_Types.ActionPayloadStructOutput;
  };
}

export interface CSUCInterface extends Interface {
  getFunction(
    nameOrSignature:
      | '_hashActionPayload'
      | '_hashActionPayloadWithCustomNonce'
      | 'acceptOwnership'
      | 'actionInfo'
      | 'balanceAndNonce'
      | 'balanceOf(address,uint256)'
      | 'balanceOf(address,address)'
      | 'balanceOfBatch'
      | 'feeCollector'
      | 'getMandatoryFee'
      | 'isApprovedForAll'
      | 'nonceOf'
      | 'operator'
      | 'operatorExecute'
      | 'owner'
      | 'pendingOwner'
      | 'renounceOwnership'
      | 'safeBatchTransferFrom'
      | 'safeTransferFrom'
      | 'setApprovalForAll'
      | 'supportsInterface'
      | 'transferOwnership'
      | 'unwrap'
      | 'updateConfig'
      | 'uri'
      | 'wrap'
      | 'wrapERC20'
      | 'wrapNative'
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | 'ActionExecuted'
      | 'ApprovalForAll'
      | 'OwnershipTransferStarted'
      | 'OwnershipTransferred'
      | 'TransferBatch'
      | 'TransferSingle'
      | 'URI'
      | 'UnwrappingToken'
      | 'WrappingToken'
  ): EventFragment;

  encodeFunctionData(
    functionFragment: '_hashActionPayload',
    values: [AddressLike, CSUC_Types.ActionPayloadStruct]
  ): string;
  encodeFunctionData(
    functionFragment: '_hashActionPayloadWithCustomNonce',
    values: [CSUC_Types.ActionPayloadStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'acceptOwnership',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'actionInfo',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'balanceAndNonce',
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'balanceOf(address,uint256)',
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'balanceOf(address,address)',
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'balanceOfBatch',
    values: [AddressLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: 'feeCollector',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'getMandatoryFee',
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'isApprovedForAll',
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'nonceOf',
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: 'operator', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'operatorExecute',
    values: [CSUC_Types.ActionStruct[]]
  ): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'pendingOwner',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'renounceOwnership',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'safeBatchTransferFrom',
    values: [
      AddressLike,
      AddressLike,
      BigNumberish[],
      BigNumberish[],
      BytesLike,
    ]
  ): string;
  encodeFunctionData(
    functionFragment: 'safeTransferFrom',
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'setApprovalForAll',
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: 'supportsInterface',
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'transferOwnership',
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'unwrap',
    values: [CSUC_Types.ActionStruct]
  ): string;
  encodeFunctionData(
    functionFragment: 'updateConfig',
    values: [CSUC_Types.ConfigUpdateStruct]
  ): string;
  encodeFunctionData(functionFragment: 'uri', values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: 'wrap',
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'wrapERC20',
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'wrapNative',
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: '_hashActionPayload',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: '_hashActionPayloadWithCustomNonce',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'acceptOwnership',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'actionInfo', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'balanceAndNonce',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'balanceOf(address,uint256)',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'balanceOf(address,address)',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'balanceOfBatch',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'feeCollector',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getMandatoryFee',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'isApprovedForAll',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'nonceOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'operator', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'operatorExecute',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'pendingOwner',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'renounceOwnership',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'safeBatchTransferFrom',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'safeTransferFrom',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setApprovalForAll',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'supportsInterface',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'transferOwnership',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'unwrap', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'updateConfig',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'uri', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'wrap', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'wrapERC20', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'wrapNative', data: BytesLike): Result;
}

export namespace ActionExecutedEvent {
  export type InputTuple = [action: CSUC_Types.ActionStruct];
  export type OutputTuple = [action: CSUC_Types.ActionStructOutput];
  export interface OutputObject {
    action: CSUC_Types.ActionStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApprovalForAllEvent {
  export type InputTuple = [
    account: AddressLike,
    operator: AddressLike,
    approved: boolean,
  ];
  export type OutputTuple = [
    account: string,
    operator: string,
    approved: boolean,
  ];
  export interface OutputObject {
    account: string;
    operator: string;
    approved: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferStartedEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferBatchEvent {
  export type InputTuple = [
    operator: AddressLike,
    from: AddressLike,
    to: AddressLike,
    ids: BigNumberish[],
    values: BigNumberish[],
  ];
  export type OutputTuple = [
    operator: string,
    from: string,
    to: string,
    ids: bigint[],
    values: bigint[],
  ];
  export interface OutputObject {
    operator: string;
    from: string;
    to: string;
    ids: bigint[];
    values: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferSingleEvent {
  export type InputTuple = [
    operator: AddressLike,
    from: AddressLike,
    to: AddressLike,
    id: BigNumberish,
    value: BigNumberish,
  ];
  export type OutputTuple = [
    operator: string,
    from: string,
    to: string,
    id: bigint,
    value: bigint,
  ];
  export interface OutputObject {
    operator: string;
    from: string;
    to: string;
    id: bigint;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace URIEvent {
  export type InputTuple = [value: string, id: BigNumberish];
  export type OutputTuple = [value: string, id: bigint];
  export interface OutputObject {
    value: string;
    id: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnwrappingTokenEvent {
  export type InputTuple = [
    token: AddressLike,
    to: AddressLike,
    amount: BigNumberish,
  ];
  export type OutputTuple = [token: string, to: string, amount: bigint];
  export interface OutputObject {
    token: string;
    to: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WrappingTokenEvent {
  export type InputTuple = [
    token: AddressLike,
    to: AddressLike,
    amount: BigNumberish,
  ];
  export type OutputTuple = [token: string, to: string, amount: bigint];
  export interface OutputObject {
    token: string;
    to: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface CSUC extends BaseContract {
  connect(runner?: ContractRunner | null): CSUC;
  waitForDeployment(): Promise<this>;

  interface: CSUCInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  _hashActionPayload: TypedContractMethod<
    [_from: AddressLike, _payload: CSUC_Types.ActionPayloadStruct],
    [string],
    'view'
  >;

  _hashActionPayloadWithCustomNonce: TypedContractMethod<
    [_payload: CSUC_Types.ActionPayloadStruct, _nonce: BigNumberish],
    [string],
    'view'
  >;

  acceptOwnership: TypedContractMethod<[], [void], 'nonpayable'>;

  actionInfo: TypedContractMethod<
    [arg0: BigNumberish],
    [[bigint, string] & { mandatoryFeePoints: bigint; handler: string }],
    'view'
  >;

  balanceAndNonce: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    'view'
  >;

  'balanceOf(address,uint256)': TypedContractMethod<
    [_owner: AddressLike, _token: BigNumberish],
    [bigint],
    'view'
  >;

  'balanceOf(address,address)': TypedContractMethod<
    [_owner: AddressLike, _token: AddressLike],
    [bigint],
    'view'
  >;

  balanceOfBatch: TypedContractMethod<
    [accounts: AddressLike[], ids: BigNumberish[]],
    [bigint[]],
    'view'
  >;

  feeCollector: TypedContractMethod<[], [string], 'view'>;

  getMandatoryFee: TypedContractMethod<
    [_actionId: BigNumberish, _amount: BigNumberish],
    [bigint],
    'view'
  >;

  isApprovedForAll: TypedContractMethod<
    [account: AddressLike, operator: AddressLike],
    [boolean],
    'view'
  >;

  nonceOf: TypedContractMethod<
    [_owner: AddressLike, _token: AddressLike],
    [bigint],
    'view'
  >;

  operator: TypedContractMethod<[], [string], 'view'>;

  operatorExecute: TypedContractMethod<
    [_actions: CSUC_Types.ActionStruct[]],
    [bigint],
    'nonpayable'
  >;

  owner: TypedContractMethod<[], [string], 'view'>;

  pendingOwner: TypedContractMethod<[], [string], 'view'>;

  renounceOwnership: TypedContractMethod<[], [void], 'nonpayable'>;

  safeBatchTransferFrom: TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      ids: BigNumberish[],
      values: BigNumberish[],
      data: BytesLike,
    ],
    [void],
    'nonpayable'
  >;

  safeTransferFrom: TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      id: BigNumberish,
      value: BigNumberish,
      data: BytesLike,
    ],
    [void],
    'nonpayable'
  >;

  setApprovalForAll: TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    'nonpayable'
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    'view'
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    'nonpayable'
  >;

  unwrap: TypedContractMethod<
    [_action: CSUC_Types.ActionStruct],
    [boolean],
    'nonpayable'
  >;

  updateConfig: TypedContractMethod<
    [_update: CSUC_Types.ConfigUpdateStruct],
    [boolean],
    'nonpayable'
  >;

  uri: TypedContractMethod<[arg0: BigNumberish], [string], 'view'>;

  wrap: TypedContractMethod<
    [_to: AddressLike, _token: AddressLike, _amount: BigNumberish],
    [boolean],
    'payable'
  >;

  wrapERC20: TypedContractMethod<
    [_to: AddressLike, _token: AddressLike, _amount: BigNumberish],
    [boolean],
    'nonpayable'
  >;

  wrapNative: TypedContractMethod<[_to: AddressLike], [boolean], 'payable'>;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: '_hashActionPayload'
  ): TypedContractMethod<
    [_from: AddressLike, _payload: CSUC_Types.ActionPayloadStruct],
    [string],
    'view'
  >;
  getFunction(
    nameOrSignature: '_hashActionPayloadWithCustomNonce'
  ): TypedContractMethod<
    [_payload: CSUC_Types.ActionPayloadStruct, _nonce: BigNumberish],
    [string],
    'view'
  >;
  getFunction(
    nameOrSignature: 'acceptOwnership'
  ): TypedContractMethod<[], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'actionInfo'
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [[bigint, string] & { mandatoryFeePoints: bigint; handler: string }],
    'view'
  >;
  getFunction(
    nameOrSignature: 'balanceAndNonce'
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    'view'
  >;
  getFunction(
    nameOrSignature: 'balanceOf(address,uint256)'
  ): TypedContractMethod<
    [_owner: AddressLike, _token: BigNumberish],
    [bigint],
    'view'
  >;
  getFunction(
    nameOrSignature: 'balanceOf(address,address)'
  ): TypedContractMethod<
    [_owner: AddressLike, _token: AddressLike],
    [bigint],
    'view'
  >;
  getFunction(
    nameOrSignature: 'balanceOfBatch'
  ): TypedContractMethod<
    [accounts: AddressLike[], ids: BigNumberish[]],
    [bigint[]],
    'view'
  >;
  getFunction(
    nameOrSignature: 'feeCollector'
  ): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'getMandatoryFee'
  ): TypedContractMethod<
    [_actionId: BigNumberish, _amount: BigNumberish],
    [bigint],
    'view'
  >;
  getFunction(
    nameOrSignature: 'isApprovedForAll'
  ): TypedContractMethod<
    [account: AddressLike, operator: AddressLike],
    [boolean],
    'view'
  >;
  getFunction(
    nameOrSignature: 'nonceOf'
  ): TypedContractMethod<
    [_owner: AddressLike, _token: AddressLike],
    [bigint],
    'view'
  >;
  getFunction(
    nameOrSignature: 'operator'
  ): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'operatorExecute'
  ): TypedContractMethod<
    [_actions: CSUC_Types.ActionStruct[]],
    [bigint],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'owner'
  ): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'pendingOwner'
  ): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'renounceOwnership'
  ): TypedContractMethod<[], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'safeBatchTransferFrom'
  ): TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      ids: BigNumberish[],
      values: BigNumberish[],
      data: BytesLike,
    ],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'safeTransferFrom'
  ): TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      id: BigNumberish,
      value: BigNumberish,
      data: BytesLike,
    ],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'setApprovalForAll'
  ): TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'supportsInterface'
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], 'view'>;
  getFunction(
    nameOrSignature: 'transferOwnership'
  ): TypedContractMethod<[newOwner: AddressLike], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'unwrap'
  ): TypedContractMethod<
    [_action: CSUC_Types.ActionStruct],
    [boolean],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'updateConfig'
  ): TypedContractMethod<
    [_update: CSUC_Types.ConfigUpdateStruct],
    [boolean],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'uri'
  ): TypedContractMethod<[arg0: BigNumberish], [string], 'view'>;
  getFunction(
    nameOrSignature: 'wrap'
  ): TypedContractMethod<
    [_to: AddressLike, _token: AddressLike, _amount: BigNumberish],
    [boolean],
    'payable'
  >;
  getFunction(
    nameOrSignature: 'wrapERC20'
  ): TypedContractMethod<
    [_to: AddressLike, _token: AddressLike, _amount: BigNumberish],
    [boolean],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'wrapNative'
  ): TypedContractMethod<[_to: AddressLike], [boolean], 'payable'>;

  getEvent(
    key: 'ActionExecuted'
  ): TypedContractEvent<
    ActionExecutedEvent.InputTuple,
    ActionExecutedEvent.OutputTuple,
    ActionExecutedEvent.OutputObject
  >;
  getEvent(
    key: 'ApprovalForAll'
  ): TypedContractEvent<
    ApprovalForAllEvent.InputTuple,
    ApprovalForAllEvent.OutputTuple,
    ApprovalForAllEvent.OutputObject
  >;
  getEvent(
    key: 'OwnershipTransferStarted'
  ): TypedContractEvent<
    OwnershipTransferStartedEvent.InputTuple,
    OwnershipTransferStartedEvent.OutputTuple,
    OwnershipTransferStartedEvent.OutputObject
  >;
  getEvent(
    key: 'OwnershipTransferred'
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: 'TransferBatch'
  ): TypedContractEvent<
    TransferBatchEvent.InputTuple,
    TransferBatchEvent.OutputTuple,
    TransferBatchEvent.OutputObject
  >;
  getEvent(
    key: 'TransferSingle'
  ): TypedContractEvent<
    TransferSingleEvent.InputTuple,
    TransferSingleEvent.OutputTuple,
    TransferSingleEvent.OutputObject
  >;
  getEvent(
    key: 'URI'
  ): TypedContractEvent<
    URIEvent.InputTuple,
    URIEvent.OutputTuple,
    URIEvent.OutputObject
  >;
  getEvent(
    key: 'UnwrappingToken'
  ): TypedContractEvent<
    UnwrappingTokenEvent.InputTuple,
    UnwrappingTokenEvent.OutputTuple,
    UnwrappingTokenEvent.OutputObject
  >;
  getEvent(
    key: 'WrappingToken'
  ): TypedContractEvent<
    WrappingTokenEvent.InputTuple,
    WrappingTokenEvent.OutputTuple,
    WrappingTokenEvent.OutputObject
  >;

  filters: {
    'ActionExecuted(tuple)': TypedContractEvent<
      ActionExecutedEvent.InputTuple,
      ActionExecutedEvent.OutputTuple,
      ActionExecutedEvent.OutputObject
    >;
    ActionExecuted: TypedContractEvent<
      ActionExecutedEvent.InputTuple,
      ActionExecutedEvent.OutputTuple,
      ActionExecutedEvent.OutputObject
    >;

    'ApprovalForAll(address,address,bool)': TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;
    ApprovalForAll: TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;

    'OwnershipTransferStarted(address,address)': TypedContractEvent<
      OwnershipTransferStartedEvent.InputTuple,
      OwnershipTransferStartedEvent.OutputTuple,
      OwnershipTransferStartedEvent.OutputObject
    >;
    OwnershipTransferStarted: TypedContractEvent<
      OwnershipTransferStartedEvent.InputTuple,
      OwnershipTransferStartedEvent.OutputTuple,
      OwnershipTransferStartedEvent.OutputObject
    >;

    'OwnershipTransferred(address,address)': TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    'TransferBatch(address,address,address,uint256[],uint256[])': TypedContractEvent<
      TransferBatchEvent.InputTuple,
      TransferBatchEvent.OutputTuple,
      TransferBatchEvent.OutputObject
    >;
    TransferBatch: TypedContractEvent<
      TransferBatchEvent.InputTuple,
      TransferBatchEvent.OutputTuple,
      TransferBatchEvent.OutputObject
    >;

    'TransferSingle(address,address,address,uint256,uint256)': TypedContractEvent<
      TransferSingleEvent.InputTuple,
      TransferSingleEvent.OutputTuple,
      TransferSingleEvent.OutputObject
    >;
    TransferSingle: TypedContractEvent<
      TransferSingleEvent.InputTuple,
      TransferSingleEvent.OutputTuple,
      TransferSingleEvent.OutputObject
    >;

    'URI(string,uint256)': TypedContractEvent<
      URIEvent.InputTuple,
      URIEvent.OutputTuple,
      URIEvent.OutputObject
    >;
    URI: TypedContractEvent<
      URIEvent.InputTuple,
      URIEvent.OutputTuple,
      URIEvent.OutputObject
    >;

    'UnwrappingToken(address,address,uint256)': TypedContractEvent<
      UnwrappingTokenEvent.InputTuple,
      UnwrappingTokenEvent.OutputTuple,
      UnwrappingTokenEvent.OutputObject
    >;
    UnwrappingToken: TypedContractEvent<
      UnwrappingTokenEvent.InputTuple,
      UnwrappingTokenEvent.OutputTuple,
      UnwrappingTokenEvent.OutputObject
    >;

    'WrappingToken(address,address,uint256)': TypedContractEvent<
      WrappingTokenEvent.InputTuple,
      WrappingTokenEvent.OutputTuple,
      WrappingTokenEvent.OutputObject
    >;
    WrappingToken: TypedContractEvent<
      WrappingTokenEvent.InputTuple,
      WrappingTokenEvent.OutputTuple,
      WrappingTokenEvent.OutputObject
    >;
  };
}
